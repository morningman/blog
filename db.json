{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/tebiechen.jpeg","path":"images/tebiechen.jpeg","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"26f078955bf9dcc4686792558e341607b196808c","modified":1621135272885},{"_id":"source/_posts/doris-compaction-1.md","hash":"45e4364b4c9537c1d0b153efbea229ebed5aa11c","modified":1621136219792},{"_id":"source/about/index.md","hash":"f3b80bab5a3cb8470b96f74d368049401b62c7b9","modified":1621135279302},{"_id":"source/_posts/doris-compaction-2.md","hash":"b977f34e70fb20fa9a00c9e9424171f12c357f5b","modified":1621136208960},{"_id":"source/tags/index.md","hash":"e5490a37317f2ed16a9c839b91607a5af2ad9d9d","modified":1621132395196},{"_id":"source/_posts/doris-compaction-3.md","hash":"5978375f3cb4e65ee048c966453088d1ece270ef","modified":1621139394532},{"_id":"source/images/tebiechen.jpeg","hash":"0f2cb0a1433e59a007732179cd9d633ed6f468d5","modified":1621133278707},{"_id":"source/_posts/doris-compaction-3/memtracker.webp","hash":"102cc091376a093f2a4bdd953cb99d918c51cdad","modified":1621138951457},{"_id":"source/_posts/doris-compaction-1/cumulative_point.webp","hash":"296fd1ce3991277badc2f4e58e29c9fd2d820cda","modified":1620621811957},{"_id":"source/_posts/doris-compaction-3/monitor1.png","hash":"250e9396bc51fe2857bb8ca2fcab752db205f00d","modified":1621138831965},{"_id":"source/_posts/doris-compaction-3/monitor2.png","hash":"d7c8c9772de6bc933552ba2213fa243442bb67a8","modified":1621138887055},{"_id":"source/_posts/doris-compaction-1/cumulative_point.png","hash":"375c4c335bbe2e8dfe0ac1c1b8ed497ba4396309","modified":1620621942248},{"_id":"source/images/avatar.png","hash":"1dcf4dde65118d69ab44a8444fe1a855919399d8","modified":1621131261114},{"_id":"source/_posts/doris-compaction-1/2048.png","hash":"9645ce765b8f52dc1522acdc6e1212948b7aebd3","modified":1620621967922},{"_id":"source/_posts/doris-compaction-3/monitor3.png","hash":"dd599f0b97465dcaae335195f707e4f80fefd255","modified":1621138975683},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621130415820},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621130415785},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621130415785},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621130415811},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621130415811},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621130415811},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621130415819},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621130415820},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1621130415773},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1621130415774},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1621130415775},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1621130415774},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1621130415774},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1621130415775},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1621130415775},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1621130415775},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1621130415775},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1621130415775},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1621130415776},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1621130415794},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1621130415776},{"_id":"themes/next/_config.yml","hash":"bfa5e56d7958103b3dc472b7db390f39df34c11e","modified":1621678977035},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1621130415774},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1621130415774},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1621130415774},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1621130415776},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1621130415775},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1621130415774},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1621130415776},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1621130415776},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1621130415777},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1621130415777},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1621130415777},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1621130415777},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1621130415777},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1621130415777},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1621130415777},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1621130415777},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1621130415778},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1621130415778},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1621130415778},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1621130415778},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1621130415778},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1621130415778},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1621130415779},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1621130415793},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1621130415793},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1621130415793},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1621130415793},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1621130415793},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1621130415794},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1621130415794},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1621130415795},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1621130415794},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1621130415859},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1621130415859},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1621130415860},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1621130415779},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1621130415779},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1621130415779},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1621130415779},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1621130415780},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1621130415780},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1621130415781},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1621130415780},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1621130415780},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1621130415781},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1621130415781},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1621130415782},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1621130415782},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1621130415782},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1621130415782},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1621130415784},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1621130415785},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1621130415786},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1621130415790},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1621130415790},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1621130415790},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1621130415791},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1621130415791},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1621130415795},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1621130415795},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1621130415791},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1621130415795},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1621130415795},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1621130415796},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1621130415796},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1621130415791},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1621130415795},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1621130415796},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1621130415796},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1621130415820},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1621130415821},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1621130415821},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1621130415821},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1621130415821},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1621130415822},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1621130415822},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1621130415822},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1621130415822},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1621130415823},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1621130415822},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1621130415823},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1621130415823},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1621130415823},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1621130415823},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1621130415824},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1621130415824},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1621130415824},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1621130415824},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1621130415782},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1621130415781},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1621130415783},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1621130415783},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1621130415783},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1621130415783},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1621130415784},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1621130415784},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1621130415784},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1621130415785},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1621130415785},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1621130415786},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1621130415786},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1621130415787},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1621130415786},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1621130415787},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1621130415787},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1621130415787},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1621130415787},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1621130415788},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1621130415788},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1621130415788},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1621130415788},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1621130415788},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1621130415789},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1621130415789},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1621130415789},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1621130415789},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1621130415789},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1621130415789},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1621130415790},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1621130415790},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1621130415790},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1621130415790},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1621130415792},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1621130415792},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1621130415792},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1621130415793},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1621130415811},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1621130415811},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1621130415811},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1621130415819},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1621130415811},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1621130415819},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1621130415820},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1621130415820},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1621130415825},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1621130415825},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1621130415825},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1621130415825},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1621130415825},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1621130415826},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1621130415826},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1621130415826},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1621130415826},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1621130415827},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1621130415827},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1621130415831},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1621130415833},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1621130415833},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1621130415833},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1621130415833},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1621130415836},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1621130415837},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1621130415837},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1621130415837},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1621130415838},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1621130415838},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1621130415838},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1621130415838},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1621130415838},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1621130415849},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1621130415850},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1621130415850},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1621130415850},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1621130415851},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1621130415851},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1621130415851},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1621130415851},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1621130415851},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1621130415852},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1621130415852},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1621130415852},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1621130415852},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1621130415852},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1621130415853},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1621130415852},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1621130415853},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1621130415853},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1621130415853},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1621130415853},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1621130415853},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1621130415853},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1621130415853},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1621130415854},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1621130415854},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1621130415854},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1621130415854},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1621130415857},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1621130415857},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1621130415859},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1621130415791},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1621130415792},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1621130415796},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1621130415796},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1621130415859},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1621130415797},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1621130415797},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1621130415859},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1621130415797},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1621130415800},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1621130415808},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1621130415809},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1621130415809},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1621130415810},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1621130415810},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1621130415810},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1621130415810},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1621130415812},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1621130415812},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1621130415812},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1621130415804},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1621130415812},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1621130415813},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1621130415814},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1621130415814},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1621130415815},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1621130415817},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1621130415817},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1621130415817},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1621130415817},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1621130415818},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1621130415818},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1621130415818},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1621130415818},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1621130415819},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1621130415819},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1621130415826},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1621130415819},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1621130415830},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1621130415830},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1621130415834},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1621130415834},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1621130415829},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1621130415834},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1621130415834},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1621130415834},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1621130415834},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1621130415835},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1621130415836},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1621130415836},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1621130415838},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1621130415837},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1621130415839},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1621130415839},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1621130415840},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1621130415857},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1621130415857},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1621130415797},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1621130415797},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1621130415797},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1621130415797},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1621130415798},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1621130415798},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1621130415798},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1621130415798},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1621130415799},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1621130415799},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1621130415799},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1621130415799},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1621130415799},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1621130415799},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1621130415800},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1621130415800},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1621130415800},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1621130415801},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1621130415801},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1621130415801},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1621130415801},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1621130415801},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1621130415801},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1621130415802},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1621130415802},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1621130415802},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1621130415802},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1621130415802},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1621130415802},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1621130415803},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1621130415803},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1621130415803},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1621130415803},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1621130415803},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1621130415803},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1621130415804},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1621130415804},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1621130415804},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1621130415804},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1621130415805},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1621130415805},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1621130415805},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1621130415805},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1621130415805},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1621130415806},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1621130415806},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1621130415806},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1621130415806},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1621130415807},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1621130415807},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1621130415807},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1621130415807},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1621130415807},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1621130415808},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1621130415807},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1621130415808},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1621130415808},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1621130415808},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1621130415816},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1621130415817},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1621130415818},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1621130415828},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1621130415828},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1621130415828},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1621130415828},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1621130415834},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1621130415829},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1621130415835},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1621130415835},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1621130415835},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1621130415835},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1621130415835},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1621130415850},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1621130415830},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1621130415849},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1621130415849},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1621130415841},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1621130415845},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1621130415849},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1621130415858},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1621130415832},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1621130415847},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1621130415856},{"_id":"public/atom.xml","hash":"0d26c66eb780abcde81a7abba9ac2c464d144982","modified":1621153504695},{"_id":"public/content.json","hash":"163248be19a3c5646968142540ef453faeccc836","modified":1621153504695},{"_id":"public/search.xml","hash":"8e01b8745e19715877c5e6f3732d53b33b40647a","modified":1621153504695},{"_id":"public/sitemap.xml","hash":"4ae7bd4b678ac2d1adbb975910263c00f2c9358b","modified":1621679049762},{"_id":"public/categories/index.html","hash":"a1e80fff89cf18c90b0e335f0556f2b8bd0fa537","modified":1621679049762},{"_id":"public/about/index.html","hash":"63dd8b2cc03e6b3dda753e32fc5889eaf083c02b","modified":1621679049762},{"_id":"public/tags/index.html","hash":"d1f7bb90df10ea78b16661c43e1be8e28929dc11","modified":1621679049762},{"_id":"public/2021/05/16/doris-compaction-3/index.html","hash":"d7df4dc9402349ed4fccc2f41095f1864e28eac3","modified":1621679049762},{"_id":"public/2021/05/16/doris-compaction-2/index.html","hash":"492dec5d72240e88a72f187dc75d106d8329ab24","modified":1621679049762},{"_id":"public/2021/05/10/doris-compaction-1/index.html","hash":"8b3c91221598072e56fff62362e27184cef3b028","modified":1621679049762},{"_id":"public/archives/index.html","hash":"a911e33392e094886cfd98a099a61edbb889ef1f","modified":1621679049762},{"_id":"public/archives/2021/index.html","hash":"665acf217aac27e4d67ad5945cdbc1a8616fb0d5","modified":1621679049762},{"_id":"public/archives/2021/05/index.html","hash":"8b6836d5ccb730057d75ed4a79a041156a4d44dc","modified":1621679049762},{"_id":"public/categories/doris-最佳实践/index.html","hash":"7b4f4e1310d9e3eb9a2bce45c4ba164902ed30b8","modified":1621679049762},{"_id":"public/index.html","hash":"ae16791fda3536f6c7fcc89806000f48671963a2","modified":1621679049762},{"_id":"public/tags/doris/index.html","hash":"6691375b840e28280ecd498f95a70c0a0bcca166","modified":1621679049762},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1621153504695},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1621153504695},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1621153504695},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1621153504695},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1621153504695},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1621153504695},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1621153504695},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1621153504695},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1621153504695},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1621153504695},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1621153504695},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1621153504695},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1621153504695},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1621153504695},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1621153504695},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1621153504695},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1621153504695},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1621153504695},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1621153504695},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1621153504695},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1621153504695},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1621153504695},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1621153504695},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1621153504695},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1621153504695},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1621153504695},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1621153504695},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1621153504695},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1621153504695},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1621153504695},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1621153504695},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1621153504695},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1621153504695},{"_id":"public/2021/05/10/doris-compaction-1/cumulative_point.webp","hash":"296fd1ce3991277badc2f4e58e29c9fd2d820cda","modified":1621153504695},{"_id":"public/2021/05/16/doris-compaction-3/memtracker.webp","hash":"102cc091376a093f2a4bdd953cb99d918c51cdad","modified":1621153504695},{"_id":"public/images/tebiechen.jpeg","hash":"0f2cb0a1433e59a007732179cd9d633ed6f468d5","modified":1621153504695},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1621153504695},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1621153504695},{"_id":"public/2021/05/16/doris-compaction-3/monitor1.png","hash":"250e9396bc51fe2857bb8ca2fcab752db205f00d","modified":1621153504695},{"_id":"public/2021/05/16/doris-compaction-3/monitor2.png","hash":"d7c8c9772de6bc933552ba2213fa243442bb67a8","modified":1621153504695},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1621153504695},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1621153504695},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1621153504695},{"_id":"public/2021/05/10/doris-compaction-1/2048.png","hash":"9645ce765b8f52dc1522acdc6e1212948b7aebd3","modified":1621153504695},{"_id":"public/2021/05/10/doris-compaction-1/cumulative_point.png","hash":"375c4c335bbe2e8dfe0ac1c1b8ed497ba4396309","modified":1621153504695},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1621153504695},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1621153504695},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1621153504695},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1621153504695},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1621153504695},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1621153504695},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1621153504695},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1621153504695},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1621153504695},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1621153504695},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1621153504695},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1621153504695},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1621153504695},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1621153504695},{"_id":"public/lib/fastclick/README.html","hash":"c88ed76304392b9e77b266fcbbc05f443c5df133","modified":1621153504695},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1621153504695},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1621153504695},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1621153504695},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1621153504695},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1621153504695},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1621153504695},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1621153504695},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1621153504695},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1621153504695},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1621153504695},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1621153504695},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1621153504695},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1621153504695},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1621153504695},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1621153504695},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1621153504695},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1621153504695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1621153504695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1621153504695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1621153504695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1621153504695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1621153504695},{"_id":"public/css/main.css","hash":"2c23283b17fc6ac19ebc68763a7ed49d502bde1f","modified":1621153504695},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1621153504695},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1621153504695},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1621153504695},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1621153504695},{"_id":"public/images/avatar.png","hash":"1dcf4dde65118d69ab44a8444fe1a855919399d8","modified":1621153504695},{"_id":"public/2021/05/16/doris-compaction-3/monitor3.png","hash":"dd599f0b97465dcaae335195f707e4f80fefd255","modified":1621153504695},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1621153504695},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1621153504695},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1621153504695},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1621153504695},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1621153504695},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1621153504695},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1621153504695},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1621153504695},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1621153504695},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1621153504695},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1621153504695},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1621153504695},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1621153504695},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1621153504695},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1621153504695},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1621153504695},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1621153504695}],"Category":[{"name":"doris 最佳实践","_id":"ckoqwxupc0004ewjz6w1p5v3t"}],"Data":[],"Page":[{"title":"categories","date":"2021-05-16T02:33:51.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-05-16 10:33:51\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-05-16T03:21:12.885Z","path":"categories/index.html","layout":"page","_id":"ckoqwxup40000ewjzfek19571","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"我是谁","date":"2021-05-16T01:49:17.000Z","comments":0,"_content":"\n<center>陈明雨</center>\n","source":"about/index.md","raw":"---\ntitle: 我是谁\ndate: 2021-05-16 09:49:17\ncomments: false\n---\n\n<center>陈明雨</center>\n","updated":"2021-05-16T03:21:19.302Z","path":"about/index.html","layout":"page","_id":"ckoqwxup90002ewjz0jfngsl7","content":"<center>陈明雨</center>\n","site":{"data":{}},"excerpt":"","more":"<center>陈明雨</center>\n"},{"title":"Tags","date":"2021-05-16T02:27:18.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2021-05-16 10:27:18\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-05-16T02:33:15.196Z","path":"tags/index.html","layout":"page","_id":"ckoqwxupd0006ewjza0oqhtla","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Doris Compaction 调优指南（1）","date":"2021-05-10T04:37:31.000Z","keywords":"doris","_content":"\n这是 Doris Compaction 调优系列文章的第一篇，本文主要介绍Compaction相关的基础知识。\n<!--more-->\n\n## 什么是 Compaction\n\nDoris 的数据写入模型使用了 LSM-Tree 类似的数据结构。数据都是以追加（Append）的方式写入磁盘的。这种数据结构可以将随机写变为顺序写。这是一种面向写优化的数据结构，他能增强系统的写入吞吐，但是在读逻辑中，需要通过 Merge-on-Read 的方式，在读取时合并多次写入的数据，从而处理写入时的数据变更。\n\nMerge-on-Read 会影响读取的效率，为了降低读取时需要合并的数据量，基于 LSM-Tree 的系统都会引入后台数据合并的逻辑，以一定策略定期的对数据进行合并。Doris 中这种机制被称为 Compaction。\n\nDoris 中每次数据写入会生成一个数据版本。Compaction的过程就是讲多个数据版本合并成一个更大的版本。Compaction 可以带来以下好处：\n\n1. 使数据更加有序\n\n    每个数据版本内的数据是按主键有序的，但是版本之间的数据是无序的。Compaction后形成的大版本将多个小版本的数据变成有序数据。在有序数据中进行数据检索的效率更高。\n\n2. 消除数据变更\n\n    数据都是以追加的方式写入的，因此 Delete、Update 等操作都是写入一个标记。Compaction 操作可以处理这些标记，进行真正的数据删除或更新，从而在读取时，不再需要根据这些标记来过滤数据。\n\n3. 增加数据聚合度\n\n    在聚合模型下，Compaction 能进一步聚合不同数据版本中相同 key 的数据行，从而增加数据聚合度，减少读取时需要实时进行的聚合计算。\n\n\n关于 Compaction 的详细介绍，可以参阅 [【Doris全面解析】Doris Compaction机制解析](https://mp.weixin.qq.com/s?__biz=Mzg5MDEyODc1OA==&mid=2247485136&idx=1&sn=a10850a61f2cb6af42484ba8250566b5&chksm=cfe016c9f8979fdf100776d9103a7960a524e5f16b9ddc6220c0f2efa84661aaa95a9958acff&scene=21&token=260549987&lang=zh_CN#wechat_redirect)。\n\n\n## Compaction 的问题\n\n用户可能需要根据实际的使用场景来调整 Compaction 的策略，否则可能遇到如下问题：\n\n1. Compaction 速度低于数据写入速度\n\n    在高频写入场景下，短时间内会产生大量的数据版本。如果 Compaction 不及时，就会造成大量版本堆积，最终严重影响写入速度。\n\n2. 写放大问题\n\n    Compaction 本质上是将已经写入的数据读取后重写写回的过程，这种数据重复写入被称为写放大。一个好的Compaction策略应该在保证效率的前提下，尽量降低写放大系数。过多的 Compaction 会占用大量的磁盘IO资源，影响系统整体效率。\n\nDoris 中用于控制Compaction的参数非常多。本文尝试以下方面，介绍这些参数的含义以及如果通过调整参数来适配场景。\n\n* 数据版本是如何产生的，哪些因素影响数据版本的产出。\n* 为什么需要 Base 和 Cumulative 两种类型的 Compaction。\n* Compaction 机制是如何挑选数据分片进行 Compaction 的。\n* 对于一个数据分片，Compaction 机制是如何确定哪些数据版本参与 Compaction 的。\n* 在高频导入场景下，可以修改哪些参数来优化 Compaction 逻辑。\n* Compaction 相关的查看和管理命令。\n\n## 数据版本的产生\n\n首先，用户的数据表会按照分区和分桶规则，切分成若干个数据分片（Tablet）存储在不同 BE 节点上。每个 Tablet 都有多个副本（默认为3副本）。Compaction 是在每个 BE 上独立进行的，Compaction 逻辑处理的就是一个 BE 节点上所有的数据分片。\n\n前文说到，Doris的数据都是以追加的方式写入系统的。Doris目前的写入依然是以微批的方式进行的，每一批次的数据针对每个 Tablet 都会形成一个 rowset。而一个 Tablet 是由多个Rowset 组成的。每个 Rowset 都有一个对应的起始版本和终止版本。对于新增Rowset，起始版本和终止版本相同，表示为 [6-6]、[7-7] 等。多个Rowset经过 Compaction 形成一个大的 Rowset，起始版本和终止版本为多个版本的并集，如 [6-6]、[7-7]、[8-8] 合并后变成 [6-8]。\n\nRowset 的数量直接影响到 Compaction 是否能够及时完成。那么一批次导入会生成多少个 Rowset 呢？这里我们举一个例子：\n\n假设集群有3个 BE 节点。每个BE节点2块盘。只有一张表，2个分区，每个分区3个分桶，默认3副本。那么总分片数量是（2 * 2 * 3）12 个，如果均匀分布在所有节点上，则每个盘上2个tablet。假设一次导入涉及到其中一个分区，则一次导入总共产生6个Rowset，即平均每块盘产生一个 Rowset。（这里仅考虑数据完全均匀分布的情况下，实际情况中，可能多个 Tablet 集中在某一块磁盘上。）\n\n从上面的例子我们可以得出，rowset的数量直接取决于表的分片数量。举个极端的例子，如果一个Doris集群只有3个BE节点，但是有9000个分片。那么一次导入，每个BE节点就会新增3000个rowset，则至少要进行3000次compaction，才能处理完所有的分片。所以：\n\n合理的设置表的分区、分桶和副本数量，避免过多的分片，可以降低Compaction的开销。\n\n## Base & Cumulative Compaction\n\nDoris 中有两种 Compaction 操作，分别称为 Base Compaction(BC) 和 Cumulative Compaction(CC)。BC 是将基线数据版本（以0为起始版本的数据）和增量数据版本合并的过程，而CC是增量数据间的合并过程。BC操作因为涉及到基线数据，而基线数据通常比较大，所以操作耗时会比CC长。\n\n如果只有 Base Compaction，则每次增量数据都要和全量的基线数据合并，写放大问题会非常严重，并且每次 Compaction 都相当耗时。因此我们需要引入 Cumulative Compaction 来先对增量数据进行合并，当增量数据合并后的大小达到一定阈值后，再和基线数据合并。这里我们有一个比较通用的 Compaction 调优策略：\n\n`在合理范围内，尽量减少 Base Compaction 操作。`\n\nBC 和 CC 之间的分界线成为 Cumulative Point（CP），这是一个动态变化的版本号。比CP小的数据版本会只会触发 BC，而比CP大的数据版本，只会触发CC。\n\n<div style=\"width:70%;margin:auto\">{% asset_img cumulative_point.png \"cumulative point\" %}</div>\n\n整个过程有点类似 2048 小游戏：只有合并后大小足够，才能继续和更大的数据版本合并。\n\n<div style=\"width:70%;margin:auto\">{% asset_img 2048.png 2048 %}</div>\n\n## 未完待续\n\n本文介绍了 Doris Compaction 的一些基础概念，在接下来的文章中，我们将详细介绍影响 Compaction 触发的参数，以及如何调整这些参数。\n\n<div class=\"tip\">\n    测试用\n</div>\n","source":"_posts/doris-compaction-1.md","raw":"---\ntitle: Doris Compaction 调优指南（1）\ndate: 2021-05-10 12:37:31\ntags: doris\nkeywords: doris\ncategories:\n  - doris 最佳实践\n---\n\n这是 Doris Compaction 调优系列文章的第一篇，本文主要介绍Compaction相关的基础知识。\n<!--more-->\n\n## 什么是 Compaction\n\nDoris 的数据写入模型使用了 LSM-Tree 类似的数据结构。数据都是以追加（Append）的方式写入磁盘的。这种数据结构可以将随机写变为顺序写。这是一种面向写优化的数据结构，他能增强系统的写入吞吐，但是在读逻辑中，需要通过 Merge-on-Read 的方式，在读取时合并多次写入的数据，从而处理写入时的数据变更。\n\nMerge-on-Read 会影响读取的效率，为了降低读取时需要合并的数据量，基于 LSM-Tree 的系统都会引入后台数据合并的逻辑，以一定策略定期的对数据进行合并。Doris 中这种机制被称为 Compaction。\n\nDoris 中每次数据写入会生成一个数据版本。Compaction的过程就是讲多个数据版本合并成一个更大的版本。Compaction 可以带来以下好处：\n\n1. 使数据更加有序\n\n    每个数据版本内的数据是按主键有序的，但是版本之间的数据是无序的。Compaction后形成的大版本将多个小版本的数据变成有序数据。在有序数据中进行数据检索的效率更高。\n\n2. 消除数据变更\n\n    数据都是以追加的方式写入的，因此 Delete、Update 等操作都是写入一个标记。Compaction 操作可以处理这些标记，进行真正的数据删除或更新，从而在读取时，不再需要根据这些标记来过滤数据。\n\n3. 增加数据聚合度\n\n    在聚合模型下，Compaction 能进一步聚合不同数据版本中相同 key 的数据行，从而增加数据聚合度，减少读取时需要实时进行的聚合计算。\n\n\n关于 Compaction 的详细介绍，可以参阅 [【Doris全面解析】Doris Compaction机制解析](https://mp.weixin.qq.com/s?__biz=Mzg5MDEyODc1OA==&mid=2247485136&idx=1&sn=a10850a61f2cb6af42484ba8250566b5&chksm=cfe016c9f8979fdf100776d9103a7960a524e5f16b9ddc6220c0f2efa84661aaa95a9958acff&scene=21&token=260549987&lang=zh_CN#wechat_redirect)。\n\n\n## Compaction 的问题\n\n用户可能需要根据实际的使用场景来调整 Compaction 的策略，否则可能遇到如下问题：\n\n1. Compaction 速度低于数据写入速度\n\n    在高频写入场景下，短时间内会产生大量的数据版本。如果 Compaction 不及时，就会造成大量版本堆积，最终严重影响写入速度。\n\n2. 写放大问题\n\n    Compaction 本质上是将已经写入的数据读取后重写写回的过程，这种数据重复写入被称为写放大。一个好的Compaction策略应该在保证效率的前提下，尽量降低写放大系数。过多的 Compaction 会占用大量的磁盘IO资源，影响系统整体效率。\n\nDoris 中用于控制Compaction的参数非常多。本文尝试以下方面，介绍这些参数的含义以及如果通过调整参数来适配场景。\n\n* 数据版本是如何产生的，哪些因素影响数据版本的产出。\n* 为什么需要 Base 和 Cumulative 两种类型的 Compaction。\n* Compaction 机制是如何挑选数据分片进行 Compaction 的。\n* 对于一个数据分片，Compaction 机制是如何确定哪些数据版本参与 Compaction 的。\n* 在高频导入场景下，可以修改哪些参数来优化 Compaction 逻辑。\n* Compaction 相关的查看和管理命令。\n\n## 数据版本的产生\n\n首先，用户的数据表会按照分区和分桶规则，切分成若干个数据分片（Tablet）存储在不同 BE 节点上。每个 Tablet 都有多个副本（默认为3副本）。Compaction 是在每个 BE 上独立进行的，Compaction 逻辑处理的就是一个 BE 节点上所有的数据分片。\n\n前文说到，Doris的数据都是以追加的方式写入系统的。Doris目前的写入依然是以微批的方式进行的，每一批次的数据针对每个 Tablet 都会形成一个 rowset。而一个 Tablet 是由多个Rowset 组成的。每个 Rowset 都有一个对应的起始版本和终止版本。对于新增Rowset，起始版本和终止版本相同，表示为 [6-6]、[7-7] 等。多个Rowset经过 Compaction 形成一个大的 Rowset，起始版本和终止版本为多个版本的并集，如 [6-6]、[7-7]、[8-8] 合并后变成 [6-8]。\n\nRowset 的数量直接影响到 Compaction 是否能够及时完成。那么一批次导入会生成多少个 Rowset 呢？这里我们举一个例子：\n\n假设集群有3个 BE 节点。每个BE节点2块盘。只有一张表，2个分区，每个分区3个分桶，默认3副本。那么总分片数量是（2 * 2 * 3）12 个，如果均匀分布在所有节点上，则每个盘上2个tablet。假设一次导入涉及到其中一个分区，则一次导入总共产生6个Rowset，即平均每块盘产生一个 Rowset。（这里仅考虑数据完全均匀分布的情况下，实际情况中，可能多个 Tablet 集中在某一块磁盘上。）\n\n从上面的例子我们可以得出，rowset的数量直接取决于表的分片数量。举个极端的例子，如果一个Doris集群只有3个BE节点，但是有9000个分片。那么一次导入，每个BE节点就会新增3000个rowset，则至少要进行3000次compaction，才能处理完所有的分片。所以：\n\n合理的设置表的分区、分桶和副本数量，避免过多的分片，可以降低Compaction的开销。\n\n## Base & Cumulative Compaction\n\nDoris 中有两种 Compaction 操作，分别称为 Base Compaction(BC) 和 Cumulative Compaction(CC)。BC 是将基线数据版本（以0为起始版本的数据）和增量数据版本合并的过程，而CC是增量数据间的合并过程。BC操作因为涉及到基线数据，而基线数据通常比较大，所以操作耗时会比CC长。\n\n如果只有 Base Compaction，则每次增量数据都要和全量的基线数据合并，写放大问题会非常严重，并且每次 Compaction 都相当耗时。因此我们需要引入 Cumulative Compaction 来先对增量数据进行合并，当增量数据合并后的大小达到一定阈值后，再和基线数据合并。这里我们有一个比较通用的 Compaction 调优策略：\n\n`在合理范围内，尽量减少 Base Compaction 操作。`\n\nBC 和 CC 之间的分界线成为 Cumulative Point（CP），这是一个动态变化的版本号。比CP小的数据版本会只会触发 BC，而比CP大的数据版本，只会触发CC。\n\n<div style=\"width:70%;margin:auto\">{% asset_img cumulative_point.png \"cumulative point\" %}</div>\n\n整个过程有点类似 2048 小游戏：只有合并后大小足够，才能继续和更大的数据版本合并。\n\n<div style=\"width:70%;margin:auto\">{% asset_img 2048.png 2048 %}</div>\n\n## 未完待续\n\n本文介绍了 Doris Compaction 的一些基础概念，在接下来的文章中，我们将详细介绍影响 Compaction 触发的参数，以及如何调整这些参数。\n\n<div class=\"tip\">\n    测试用\n</div>\n","slug":"doris-compaction-1","published":1,"updated":"2021-05-16T03:36:59.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoqwxup70001ewjz6rswaoth","content":"<p>这是 Doris Compaction 调优系列文章的第一篇，本文主要介绍Compaction相关的基础知识。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"什么是-Compaction\"><a href=\"#什么是-Compaction\" class=\"headerlink\" title=\"什么是 Compaction\"></a>什么是 Compaction</h2><p>Doris 的数据写入模型使用了 LSM-Tree 类似的数据结构。数据都是以追加（Append）的方式写入磁盘的。这种数据结构可以将随机写变为顺序写。这是一种面向写优化的数据结构，他能增强系统的写入吞吐，但是在读逻辑中，需要通过 Merge-on-Read 的方式，在读取时合并多次写入的数据，从而处理写入时的数据变更。</p>\n<p>Merge-on-Read 会影响读取的效率，为了降低读取时需要合并的数据量，基于 LSM-Tree 的系统都会引入后台数据合并的逻辑，以一定策略定期的对数据进行合并。Doris 中这种机制被称为 Compaction。</p>\n<p>Doris 中每次数据写入会生成一个数据版本。Compaction的过程就是讲多个数据版本合并成一个更大的版本。Compaction 可以带来以下好处：</p>\n<ol>\n<li><p>使数据更加有序</p>\n<p> 每个数据版本内的数据是按主键有序的，但是版本之间的数据是无序的。Compaction后形成的大版本将多个小版本的数据变成有序数据。在有序数据中进行数据检索的效率更高。</p>\n</li>\n<li><p>消除数据变更</p>\n<p> 数据都是以追加的方式写入的，因此 Delete、Update 等操作都是写入一个标记。Compaction 操作可以处理这些标记，进行真正的数据删除或更新，从而在读取时，不再需要根据这些标记来过滤数据。</p>\n</li>\n<li><p>增加数据聚合度</p>\n<p> 在聚合模型下，Compaction 能进一步聚合不同数据版本中相同 key 的数据行，从而增加数据聚合度，减少读取时需要实时进行的聚合计算。</p>\n</li>\n</ol>\n<p>关于 Compaction 的详细介绍，可以参阅 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg5MDEyODc1OA==&mid=2247485136&idx=1&sn=a10850a61f2cb6af42484ba8250566b5&chksm=cfe016c9f8979fdf100776d9103a7960a524e5f16b9ddc6220c0f2efa84661aaa95a9958acff&scene=21&token=260549987&lang=zh_CN#wechat_redirect\">【Doris全面解析】Doris Compaction机制解析</a>。</p>\n<h2 id=\"Compaction-的问题\"><a href=\"#Compaction-的问题\" class=\"headerlink\" title=\"Compaction 的问题\"></a>Compaction 的问题</h2><p>用户可能需要根据实际的使用场景来调整 Compaction 的策略，否则可能遇到如下问题：</p>\n<ol>\n<li><p>Compaction 速度低于数据写入速度</p>\n<p> 在高频写入场景下，短时间内会产生大量的数据版本。如果 Compaction 不及时，就会造成大量版本堆积，最终严重影响写入速度。</p>\n</li>\n<li><p>写放大问题</p>\n<p> Compaction 本质上是将已经写入的数据读取后重写写回的过程，这种数据重复写入被称为写放大。一个好的Compaction策略应该在保证效率的前提下，尽量降低写放大系数。过多的 Compaction 会占用大量的磁盘IO资源，影响系统整体效率。</p>\n</li>\n</ol>\n<p>Doris 中用于控制Compaction的参数非常多。本文尝试以下方面，介绍这些参数的含义以及如果通过调整参数来适配场景。</p>\n<ul>\n<li>数据版本是如何产生的，哪些因素影响数据版本的产出。</li>\n<li>为什么需要 Base 和 Cumulative 两种类型的 Compaction。</li>\n<li>Compaction 机制是如何挑选数据分片进行 Compaction 的。</li>\n<li>对于一个数据分片，Compaction 机制是如何确定哪些数据版本参与 Compaction 的。</li>\n<li>在高频导入场景下，可以修改哪些参数来优化 Compaction 逻辑。</li>\n<li>Compaction 相关的查看和管理命令。</li>\n</ul>\n<h2 id=\"数据版本的产生\"><a href=\"#数据版本的产生\" class=\"headerlink\" title=\"数据版本的产生\"></a>数据版本的产生</h2><p>首先，用户的数据表会按照分区和分桶规则，切分成若干个数据分片（Tablet）存储在不同 BE 节点上。每个 Tablet 都有多个副本（默认为3副本）。Compaction 是在每个 BE 上独立进行的，Compaction 逻辑处理的就是一个 BE 节点上所有的数据分片。</p>\n<p>前文说到，Doris的数据都是以追加的方式写入系统的。Doris目前的写入依然是以微批的方式进行的，每一批次的数据针对每个 Tablet 都会形成一个 rowset。而一个 Tablet 是由多个Rowset 组成的。每个 Rowset 都有一个对应的起始版本和终止版本。对于新增Rowset，起始版本和终止版本相同，表示为 [6-6]、[7-7] 等。多个Rowset经过 Compaction 形成一个大的 Rowset，起始版本和终止版本为多个版本的并集，如 [6-6]、[7-7]、[8-8] 合并后变成 [6-8]。</p>\n<p>Rowset 的数量直接影响到 Compaction 是否能够及时完成。那么一批次导入会生成多少个 Rowset 呢？这里我们举一个例子：</p>\n<p>假设集群有3个 BE 节点。每个BE节点2块盘。只有一张表，2个分区，每个分区3个分桶，默认3副本。那么总分片数量是（2 * 2 * 3）12 个，如果均匀分布在所有节点上，则每个盘上2个tablet。假设一次导入涉及到其中一个分区，则一次导入总共产生6个Rowset，即平均每块盘产生一个 Rowset。（这里仅考虑数据完全均匀分布的情况下，实际情况中，可能多个 Tablet 集中在某一块磁盘上。）</p>\n<p>从上面的例子我们可以得出，rowset的数量直接取决于表的分片数量。举个极端的例子，如果一个Doris集群只有3个BE节点，但是有9000个分片。那么一次导入，每个BE节点就会新增3000个rowset，则至少要进行3000次compaction，才能处理完所有的分片。所以：</p>\n<p>合理的设置表的分区、分桶和副本数量，避免过多的分片，可以降低Compaction的开销。</p>\n<h2 id=\"Base-amp-Cumulative-Compaction\"><a href=\"#Base-amp-Cumulative-Compaction\" class=\"headerlink\" title=\"Base &amp; Cumulative Compaction\"></a>Base &amp; Cumulative Compaction</h2><p>Doris 中有两种 Compaction 操作，分别称为 Base Compaction(BC) 和 Cumulative Compaction(CC)。BC 是将基线数据版本（以0为起始版本的数据）和增量数据版本合并的过程，而CC是增量数据间的合并过程。BC操作因为涉及到基线数据，而基线数据通常比较大，所以操作耗时会比CC长。</p>\n<p>如果只有 Base Compaction，则每次增量数据都要和全量的基线数据合并，写放大问题会非常严重，并且每次 Compaction 都相当耗时。因此我们需要引入 Cumulative Compaction 来先对增量数据进行合并，当增量数据合并后的大小达到一定阈值后，再和基线数据合并。这里我们有一个比较通用的 Compaction 调优策略：</p>\n<p><code>在合理范围内，尽量减少 Base Compaction 操作。</code></p>\n<p>BC 和 CC 之间的分界线成为 Cumulative Point（CP），这是一个动态变化的版本号。比CP小的数据版本会只会触发 BC，而比CP大的数据版本，只会触发CC。</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/10/doris-compaction-1/cumulative_point.png\" class=\"\" title=\"cumulative point\"></div>\n\n<p>整个过程有点类似 2048 小游戏：只有合并后大小足够，才能继续和更大的数据版本合并。</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/10/doris-compaction-1/2048.png\" class=\"\" width=\"2048\"></div>\n\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>本文介绍了 Doris Compaction 的一些基础概念，在接下来的文章中，我们将详细介绍影响 Compaction 触发的参数，以及如何调整这些参数。</p>\n<div class=\"tip\">\n    测试用\n</div>\n","site":{"data":{}},"excerpt":"<p>这是 Doris Compaction 调优系列文章的第一篇，本文主要介绍Compaction相关的基础知识。</p>","more":"<h2 id=\"什么是-Compaction\"><a href=\"#什么是-Compaction\" class=\"headerlink\" title=\"什么是 Compaction\"></a>什么是 Compaction</h2><p>Doris 的数据写入模型使用了 LSM-Tree 类似的数据结构。数据都是以追加（Append）的方式写入磁盘的。这种数据结构可以将随机写变为顺序写。这是一种面向写优化的数据结构，他能增强系统的写入吞吐，但是在读逻辑中，需要通过 Merge-on-Read 的方式，在读取时合并多次写入的数据，从而处理写入时的数据变更。</p>\n<p>Merge-on-Read 会影响读取的效率，为了降低读取时需要合并的数据量，基于 LSM-Tree 的系统都会引入后台数据合并的逻辑，以一定策略定期的对数据进行合并。Doris 中这种机制被称为 Compaction。</p>\n<p>Doris 中每次数据写入会生成一个数据版本。Compaction的过程就是讲多个数据版本合并成一个更大的版本。Compaction 可以带来以下好处：</p>\n<ol>\n<li><p>使数据更加有序</p>\n<p> 每个数据版本内的数据是按主键有序的，但是版本之间的数据是无序的。Compaction后形成的大版本将多个小版本的数据变成有序数据。在有序数据中进行数据检索的效率更高。</p>\n</li>\n<li><p>消除数据变更</p>\n<p> 数据都是以追加的方式写入的，因此 Delete、Update 等操作都是写入一个标记。Compaction 操作可以处理这些标记，进行真正的数据删除或更新，从而在读取时，不再需要根据这些标记来过滤数据。</p>\n</li>\n<li><p>增加数据聚合度</p>\n<p> 在聚合模型下，Compaction 能进一步聚合不同数据版本中相同 key 的数据行，从而增加数据聚合度，减少读取时需要实时进行的聚合计算。</p>\n</li>\n</ol>\n<p>关于 Compaction 的详细介绍，可以参阅 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg5MDEyODc1OA==&mid=2247485136&idx=1&sn=a10850a61f2cb6af42484ba8250566b5&chksm=cfe016c9f8979fdf100776d9103a7960a524e5f16b9ddc6220c0f2efa84661aaa95a9958acff&scene=21&token=260549987&lang=zh_CN#wechat_redirect\">【Doris全面解析】Doris Compaction机制解析</a>。</p>\n<h2 id=\"Compaction-的问题\"><a href=\"#Compaction-的问题\" class=\"headerlink\" title=\"Compaction 的问题\"></a>Compaction 的问题</h2><p>用户可能需要根据实际的使用场景来调整 Compaction 的策略，否则可能遇到如下问题：</p>\n<ol>\n<li><p>Compaction 速度低于数据写入速度</p>\n<p> 在高频写入场景下，短时间内会产生大量的数据版本。如果 Compaction 不及时，就会造成大量版本堆积，最终严重影响写入速度。</p>\n</li>\n<li><p>写放大问题</p>\n<p> Compaction 本质上是将已经写入的数据读取后重写写回的过程，这种数据重复写入被称为写放大。一个好的Compaction策略应该在保证效率的前提下，尽量降低写放大系数。过多的 Compaction 会占用大量的磁盘IO资源，影响系统整体效率。</p>\n</li>\n</ol>\n<p>Doris 中用于控制Compaction的参数非常多。本文尝试以下方面，介绍这些参数的含义以及如果通过调整参数来适配场景。</p>\n<ul>\n<li>数据版本是如何产生的，哪些因素影响数据版本的产出。</li>\n<li>为什么需要 Base 和 Cumulative 两种类型的 Compaction。</li>\n<li>Compaction 机制是如何挑选数据分片进行 Compaction 的。</li>\n<li>对于一个数据分片，Compaction 机制是如何确定哪些数据版本参与 Compaction 的。</li>\n<li>在高频导入场景下，可以修改哪些参数来优化 Compaction 逻辑。</li>\n<li>Compaction 相关的查看和管理命令。</li>\n</ul>\n<h2 id=\"数据版本的产生\"><a href=\"#数据版本的产生\" class=\"headerlink\" title=\"数据版本的产生\"></a>数据版本的产生</h2><p>首先，用户的数据表会按照分区和分桶规则，切分成若干个数据分片（Tablet）存储在不同 BE 节点上。每个 Tablet 都有多个副本（默认为3副本）。Compaction 是在每个 BE 上独立进行的，Compaction 逻辑处理的就是一个 BE 节点上所有的数据分片。</p>\n<p>前文说到，Doris的数据都是以追加的方式写入系统的。Doris目前的写入依然是以微批的方式进行的，每一批次的数据针对每个 Tablet 都会形成一个 rowset。而一个 Tablet 是由多个Rowset 组成的。每个 Rowset 都有一个对应的起始版本和终止版本。对于新增Rowset，起始版本和终止版本相同，表示为 [6-6]、[7-7] 等。多个Rowset经过 Compaction 形成一个大的 Rowset，起始版本和终止版本为多个版本的并集，如 [6-6]、[7-7]、[8-8] 合并后变成 [6-8]。</p>\n<p>Rowset 的数量直接影响到 Compaction 是否能够及时完成。那么一批次导入会生成多少个 Rowset 呢？这里我们举一个例子：</p>\n<p>假设集群有3个 BE 节点。每个BE节点2块盘。只有一张表，2个分区，每个分区3个分桶，默认3副本。那么总分片数量是（2 * 2 * 3）12 个，如果均匀分布在所有节点上，则每个盘上2个tablet。假设一次导入涉及到其中一个分区，则一次导入总共产生6个Rowset，即平均每块盘产生一个 Rowset。（这里仅考虑数据完全均匀分布的情况下，实际情况中，可能多个 Tablet 集中在某一块磁盘上。）</p>\n<p>从上面的例子我们可以得出，rowset的数量直接取决于表的分片数量。举个极端的例子，如果一个Doris集群只有3个BE节点，但是有9000个分片。那么一次导入，每个BE节点就会新增3000个rowset，则至少要进行3000次compaction，才能处理完所有的分片。所以：</p>\n<p>合理的设置表的分区、分桶和副本数量，避免过多的分片，可以降低Compaction的开销。</p>\n<h2 id=\"Base-amp-Cumulative-Compaction\"><a href=\"#Base-amp-Cumulative-Compaction\" class=\"headerlink\" title=\"Base &amp; Cumulative Compaction\"></a>Base &amp; Cumulative Compaction</h2><p>Doris 中有两种 Compaction 操作，分别称为 Base Compaction(BC) 和 Cumulative Compaction(CC)。BC 是将基线数据版本（以0为起始版本的数据）和增量数据版本合并的过程，而CC是增量数据间的合并过程。BC操作因为涉及到基线数据，而基线数据通常比较大，所以操作耗时会比CC长。</p>\n<p>如果只有 Base Compaction，则每次增量数据都要和全量的基线数据合并，写放大问题会非常严重，并且每次 Compaction 都相当耗时。因此我们需要引入 Cumulative Compaction 来先对增量数据进行合并，当增量数据合并后的大小达到一定阈值后，再和基线数据合并。这里我们有一个比较通用的 Compaction 调优策略：</p>\n<p><code>在合理范围内，尽量减少 Base Compaction 操作。</code></p>\n<p>BC 和 CC 之间的分界线成为 Cumulative Point（CP），这是一个动态变化的版本号。比CP小的数据版本会只会触发 BC，而比CP大的数据版本，只会触发CC。</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/10/doris-compaction-1/cumulative_point.png\" class=\"\" title=\"cumulative point\"></div>\n\n<p>整个过程有点类似 2048 小游戏：只有合并后大小足够，才能继续和更大的数据版本合并。</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/10/doris-compaction-1/2048.png\" class=\"\" width=\"2048\"></div>\n\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>本文介绍了 Doris Compaction 的一些基础概念，在接下来的文章中，我们将详细介绍影响 Compaction 触发的参数，以及如何调整这些参数。</p>\n<div class=\"tip\">\n    测试用\n</div>"},{"title":"Doris Compaction 调优指南（2）","date":"2021-05-16T03:29:31.000Z","keywords":"doris","_content":"\n这是 Doris Compaction 调优系列文章的第二篇。本文介绍了 Doris Compaction 任务的生成逻辑和执行逻辑。并且介绍了相关控制参数。\n<!--more-->\n\n本文是 Compaction 调优系列文章的第二篇。在前一篇文章中我们介绍了Compaction的一些基本概念。这里我们回顾下两个重要概念：\n\n1. 每个 BE 节点上的 Compaction 操作都是独立进行的。Compaction 的对象是单个 BE 节点上的全部数据分片。\n\n2. Compaction 分为 Base Compaction(BC) 和 Cumulative Compaction(CC)，由Cumulative Point(CP) 划分，根据一定策略，选择一组rowset进行Compaction。\n\n本文将继续从以下两个方面深入了解 Compaction\n\n1. Compaction 机制是如何挑选数据分片进行 Compaction 的。\n\n2. 对于一个数据分片，Compaction 机制是如何确定哪些数据版本参与 Compaction 的。\n\n## 数据分片选择策略\n\nCompaction 的目的是合并多个数据版本，一是避免在读取时大量的 Merge 操作，二是避免大量的数据版本导致的随机IO。因此，Compaction 策略的重点问题，就是如何选择合适的 tablet，以保证节点上不会出现数据版本过多的数据分片。\n\n### Compaction 分数\n\n一个自然的想法，就是每次都选择数据版本最多的数据分片进行 Compaction。这个策略也是 Doris 的默认策略。这个策略在大部分场景下都能很好的工作。但是考虑到一种情况，就是版本多的分片，可能并不是最频繁访问的分片。而 Compaction 的目的就是优化读性能。那么有可能某一张 “写多读少” 表一直在 Compaction，而另一张 “读多写少” 的表不能及时的 Compaction，导致读性能变差。\n\n因此，Doris 在选择数据分片时还引入了 “读取频率” 的因素。“读取频率” 和 “版本数量” 会根据各自的权重，综合计算出一个 Compaction 分数，分数越高的分片，优先做 Compaction。这两个因素的权重由以下 BE 参数控制（取值越大，权重越高）：\n\n* `compaction_tablet_scan_frequency_factor`：“读取频率” 的权重值，默认为 0。\n* \n* `compaction_tablet_compaction_score_factor`：“版本数量” 的权重，默认为 1。\n\n> “读取频率” 的权重值默认为0，即默认仅考虑 “版本数量”  这个因素。\n\n### 生产者与消费者\n\nCompaction 系统是一个 生产者-消费者 模型。由一个生产者线程负责选择需要做 Compaction 的数据分片，而多个消费者负责执行 Compaction 操作。\n\n生产者线程只有一个，会定期扫描所有 tablet 来选择合适的 compaction 对象。因为 Base Compaction 和 Cumulative Compaction 是不同类型的任务，因此目前的策略是每生成 9 个 CC 任务，生成一个 BC 任务。任务生成的频率由以下两个参数控制：\n\n* `cumulative_compaction_rounds_for_each_base_compaction_round`：多少个CC任务后生成一个BC任务。\n* \n* `generate_compaction_tasks_min_interval_ms`：任务生成的间隔。\n\n> 这两个参数通常情况下不需要调整。\n\n生产者线程产生的任务会被提交到消费者线程池。因为 Compaction 是一个IO密集型的任务，为了保证 Compaction 任务不会过多的占用IO资源，Doris 限制了每个磁盘上能够同时进行的 Compaction 任务数量，以及节点整体的任务数量，这些限制由以下参数控制：\n\n* `compaction_task_num_per_disk`：每个磁盘上的任务数，默认为2。该参数必须大于等于2，以保证 BC 和 CC 任务各自至少有一个线程。\n* \n* `max_compaction_threads`：消费者线程，即Compaction线程的总数。默认为 10。\n\n举个例子，假设一个 BE 节点配置了3个数据目录（即3块磁盘），每个磁盘上的任务数配置为2，总线程数为5。则同一时间，最多有5个 Compaction 任务在进行，而每块磁盘上最多有2个任务在进行。并且最多有3个 BC 任务在进行，因为每块盘上会自动预留一个线程给CC任务。\n\n另一方面，Compaction 任务同时也是一个内存密集型任务，因为其本质是一个多路归并排序的过程，每一路是一个数据版本。如果一个 Compaction 任务涉及的数据版本很多，则会占用更多的内存，如果仅限制任务数，而不考虑任务的内存开销，则有可能导致系统内存超限。因此，Doris 在上述任务个数限制之外，还增加了一个任务配额限制：\n\n* `total_permits_for_compaction_score`：Compaction 任务配额，默认 10000。\n\n每个 Compaction 任务都有一个配额，其数值就是任务涉及的数据版本数量。假设一个任务需要合并100个版本，则其配额为100。当正在运行的任务配额总和超过配置后，新的任务将被拒绝。\n\n三个配置共同决定了节点所能承受的 Compaction 任务数量。\n\n## 数据版本选择策略\n\n一个 Compaction 任务对应的是一个数据分片（Tablet）。消费线程拿到一个 Compaction 任务后，会根据 Compaction 的任务类型，选择 tablet 中合适的数据版本（Rowset）进行数据合并。下面分别介绍 Base Compaction 和 Cumulative Compaction 的数据分片选择策略。\n\n### Base Compaction\n\n前文说过，BC 任务是增量数据和基线数据的合并任务。并且只有比 Cumulative Point（CP） 小的数据版本才会参与 BC 任务。因此，BC 任务的数据版本选取策略比较简单。\n\n首先，会选取所有版本在 0 到 CP之间的 rowset。然后根据以下几个配置参数，判断是否启动一个 BC 任务：\n\n* `base_compaction_num_cumulative_deltas`：一次 BC 任务最小版本数量限制。默认为5。该参数主要为了避免过多 BC 任务。当数据版本数量较少时，BC 是没有必要的。\n* \n* `base_compaction_interval_seconds_since_last_operation`：第一个参数限制了当版本数量少时，不会进行 BC 任务。但我们需要避免另一种情况，即某些 tablet 可能仅会导入少量批次的数据，因此当 Doris 发现一个 tablet 长时间没有执行过 BC 任务时，也会触发 BC 任务。这个参数就是控制这个时间的，默认是 86400，单位是秒。\n\n> 以上两个参数通常情况下不需要修改，在某些情况下如何需要想尽快合并基线数据，可以尝试改小 base_compaction_num_cumulative_deltas 参数。但这个参数只会影响到 “被选中的 tablet”。而 “被选中” 的前提是这个 tablet 的数据版本数量是最多的。\n\n### Cumulative Compaction\n\nCC 任务只会选取版本比 CP 大的数据版本。其本身的选取策略也比较简单，即从 CP 版本开始，依次向后选取数据版本。最终的数据版本集合由以下参数控制：\n\n* `min_cumulative_compaction_num_singleton_deltas`：一次 CC 任务最少的版本数量限制。这个配置是和`cumulative_size_based_compaction_lower_size_mbytes` 配置同时判断的。即如果版本数量小于阈值，并且数据量也小于阈值，则不会触发 CC 任务。以避免躲过不比较的 CC 任务。默认是5。\n\n* `max_cumulative_compaction_num_singleton_deltas`：一次 CC 任务最大的版本数量限制。以防止一次 CC 任务合并的版本数量过多，占用过多资源。默认是1000。\n\n* `cumulative_size_based_compaction_lower_size_mbytes`：一次 CC 任务最少的数据量，和min_cumulative_compaction_num_singleton_delta 同时判断。默认是 64，单位是 MB。\n\n简单来说，默认配置下，就是从 CP 版本开始往后选取 rowset。最少选5个，最多选 1000 个，然后判断数据量是否大于阈值即可。\n\nCC 任务还有一个重要步骤，就是在合并任务结束后，设置新的 Cumulative Point。CC 任务合并完成后，会产生一个合并后的新的数据版本，而我们要做的就是判断这个新的数据版是 “晋升” 到 BC 任务区，还是依然保留在 CC 任务区。举个例子：\n\n假设当前 CP 是 10。有一个 CC 任务合并了 [10-13] [14-14] [15-15] 后生成了 [10-15] 这个版本。如果决定将 [10-15] 版本移动到 BC 任务区，则需修改 CP 为 15，否则 CP 保持不变，依然为 10。\n\nCP 只会增加，不会减少。 以下参数决定了是否更新 CP：\n\n* `cumulative_size_based_promotion_ratio`：晋升比率。默认 0.05。\n\n* `cumulative_size_based_promotion_min_size_mbytes`：最小晋升大小，默认 64，单位 MB。\n\n* `cumulative_size_based_promotion_size_mbytes`：最大晋升大小，默认 1024，单位 MB。\n\n以上参数比较难理解，这里我们先解释下 “晋升” 的原则。一个 CC 任务生成的 rowset 的晋升原则，是其数据大小和基线数据的大小在 “同一量级”。这个类似 2048 小游戏，只有相同的数字才能合并形成更大的数字。而上面三个参数，就是用于判断一个新的rowset是否匹配基线数据的数量级。举例说明：\n\n在默认配置下，假设当前基线数据（即所有 CP 之前的数据版本）的数据量为 10GB，则晋升量级为 （10GB * 0.05）512MB。这个数值大于 64 MB 小于 1024 MB，满足条件。所以如果 CC 任务生成的新的 rowset 的大小大于 512 MB，则可以晋升，即 CP 增加。而假设基线数据为 50GB，则晋升量级为（50GB * 0.05）2.5GB。这个数值大于 64 MB 也大于 1024 MB，因此晋升量级会被调整为 1024 MB。所以如果 CC 任务生成的新的 rowset 的大小大于 1024 MB，则可以晋升，即 CP 增加。\n\n从上面的例子可以看出，`cumulative_size_based_promotion_ratio` 用于定义 “同一量级”，0.05 即表示数据量大于基线数据的 5% 的 rowset 都有晋升的可能，而 `cumulative_size_based_promotion_min_size_mbytes` 和 `cumulative_size_based_promotion_size_mbytes` 用于保证晋升不会过于频繁或过于严格。\n\n> 这三个参数会直接影响 BC 和 CC 任务的频率，尤其在高频导入场景下需要适当调整。我们会在后续文章中举例说明。\n\n## 其他 Compaction 参数和注意事项\n\n还有一些参数和 Compaction 相关，在某些情况下需要修改：\n\n* `disable_auto_compaction`：默认为 false，修改为 true 则会禁止 Compaction 操作。该参数仅在一些调试情况，或者 compaction 异常需要临时关闭的情况下才需使用。\n\n### Delete 灾难\n\n通过 `DELETE FROM` 语句执行的数据删除操作，在 Doris 中也会生成一个数据版本用于标记删除。这种类型的数据版本比较特殊，我们成为 “删除版本”。删除版本只能通过 Base Compaction 任务处理。因此在在遇到删除版本时，Cumulative Point 会强制增加，将删除版本移动到 BC 任务区。因此数据导入和删除交替发生的场景通常会导致 Compaction 灾难。比如以下版本序列：\n\n```\n[0-10]\n[11-11] 删除版本\n[12-12]\n[13-13] 删除版本\n[14-14]\n[15-15] 删除版本\n[16-16]\n[17-17] 删除版本\n...\n```\n\n在这种情况下，CC 任务几乎不会被触发（因为CC任务只能选择一个版本，而无法处理删除版本），所有版本都会交给 Base Compaction 处理，导致 Compaction 进度缓慢。目前Doris还无法很好的处理这种场景，因此需要在业务上尽量避免。\n\n## 未完待续\n\n本文介绍了 Doris Compaction 任务的生成逻辑和执行逻辑。并且介绍了相关控制参数。接下来的文章，将通过一些具体场景来介绍调整 Compaction 参数的思路，以满足业务需求。","source":"_posts/doris-compaction-2.md","raw":"---\ntitle: Doris Compaction 调优指南（2）\ndate: 2021-05-16 11:29:31\ntags: doris\nkeywords: doris\ncategories:\n  - doris 最佳实践\n---\n\n这是 Doris Compaction 调优系列文章的第二篇。本文介绍了 Doris Compaction 任务的生成逻辑和执行逻辑。并且介绍了相关控制参数。\n<!--more-->\n\n本文是 Compaction 调优系列文章的第二篇。在前一篇文章中我们介绍了Compaction的一些基本概念。这里我们回顾下两个重要概念：\n\n1. 每个 BE 节点上的 Compaction 操作都是独立进行的。Compaction 的对象是单个 BE 节点上的全部数据分片。\n\n2. Compaction 分为 Base Compaction(BC) 和 Cumulative Compaction(CC)，由Cumulative Point(CP) 划分，根据一定策略，选择一组rowset进行Compaction。\n\n本文将继续从以下两个方面深入了解 Compaction\n\n1. Compaction 机制是如何挑选数据分片进行 Compaction 的。\n\n2. 对于一个数据分片，Compaction 机制是如何确定哪些数据版本参与 Compaction 的。\n\n## 数据分片选择策略\n\nCompaction 的目的是合并多个数据版本，一是避免在读取时大量的 Merge 操作，二是避免大量的数据版本导致的随机IO。因此，Compaction 策略的重点问题，就是如何选择合适的 tablet，以保证节点上不会出现数据版本过多的数据分片。\n\n### Compaction 分数\n\n一个自然的想法，就是每次都选择数据版本最多的数据分片进行 Compaction。这个策略也是 Doris 的默认策略。这个策略在大部分场景下都能很好的工作。但是考虑到一种情况，就是版本多的分片，可能并不是最频繁访问的分片。而 Compaction 的目的就是优化读性能。那么有可能某一张 “写多读少” 表一直在 Compaction，而另一张 “读多写少” 的表不能及时的 Compaction，导致读性能变差。\n\n因此，Doris 在选择数据分片时还引入了 “读取频率” 的因素。“读取频率” 和 “版本数量” 会根据各自的权重，综合计算出一个 Compaction 分数，分数越高的分片，优先做 Compaction。这两个因素的权重由以下 BE 参数控制（取值越大，权重越高）：\n\n* `compaction_tablet_scan_frequency_factor`：“读取频率” 的权重值，默认为 0。\n* \n* `compaction_tablet_compaction_score_factor`：“版本数量” 的权重，默认为 1。\n\n> “读取频率” 的权重值默认为0，即默认仅考虑 “版本数量”  这个因素。\n\n### 生产者与消费者\n\nCompaction 系统是一个 生产者-消费者 模型。由一个生产者线程负责选择需要做 Compaction 的数据分片，而多个消费者负责执行 Compaction 操作。\n\n生产者线程只有一个，会定期扫描所有 tablet 来选择合适的 compaction 对象。因为 Base Compaction 和 Cumulative Compaction 是不同类型的任务，因此目前的策略是每生成 9 个 CC 任务，生成一个 BC 任务。任务生成的频率由以下两个参数控制：\n\n* `cumulative_compaction_rounds_for_each_base_compaction_round`：多少个CC任务后生成一个BC任务。\n* \n* `generate_compaction_tasks_min_interval_ms`：任务生成的间隔。\n\n> 这两个参数通常情况下不需要调整。\n\n生产者线程产生的任务会被提交到消费者线程池。因为 Compaction 是一个IO密集型的任务，为了保证 Compaction 任务不会过多的占用IO资源，Doris 限制了每个磁盘上能够同时进行的 Compaction 任务数量，以及节点整体的任务数量，这些限制由以下参数控制：\n\n* `compaction_task_num_per_disk`：每个磁盘上的任务数，默认为2。该参数必须大于等于2，以保证 BC 和 CC 任务各自至少有一个线程。\n* \n* `max_compaction_threads`：消费者线程，即Compaction线程的总数。默认为 10。\n\n举个例子，假设一个 BE 节点配置了3个数据目录（即3块磁盘），每个磁盘上的任务数配置为2，总线程数为5。则同一时间，最多有5个 Compaction 任务在进行，而每块磁盘上最多有2个任务在进行。并且最多有3个 BC 任务在进行，因为每块盘上会自动预留一个线程给CC任务。\n\n另一方面，Compaction 任务同时也是一个内存密集型任务，因为其本质是一个多路归并排序的过程，每一路是一个数据版本。如果一个 Compaction 任务涉及的数据版本很多，则会占用更多的内存，如果仅限制任务数，而不考虑任务的内存开销，则有可能导致系统内存超限。因此，Doris 在上述任务个数限制之外，还增加了一个任务配额限制：\n\n* `total_permits_for_compaction_score`：Compaction 任务配额，默认 10000。\n\n每个 Compaction 任务都有一个配额，其数值就是任务涉及的数据版本数量。假设一个任务需要合并100个版本，则其配额为100。当正在运行的任务配额总和超过配置后，新的任务将被拒绝。\n\n三个配置共同决定了节点所能承受的 Compaction 任务数量。\n\n## 数据版本选择策略\n\n一个 Compaction 任务对应的是一个数据分片（Tablet）。消费线程拿到一个 Compaction 任务后，会根据 Compaction 的任务类型，选择 tablet 中合适的数据版本（Rowset）进行数据合并。下面分别介绍 Base Compaction 和 Cumulative Compaction 的数据分片选择策略。\n\n### Base Compaction\n\n前文说过，BC 任务是增量数据和基线数据的合并任务。并且只有比 Cumulative Point（CP） 小的数据版本才会参与 BC 任务。因此，BC 任务的数据版本选取策略比较简单。\n\n首先，会选取所有版本在 0 到 CP之间的 rowset。然后根据以下几个配置参数，判断是否启动一个 BC 任务：\n\n* `base_compaction_num_cumulative_deltas`：一次 BC 任务最小版本数量限制。默认为5。该参数主要为了避免过多 BC 任务。当数据版本数量较少时，BC 是没有必要的。\n* \n* `base_compaction_interval_seconds_since_last_operation`：第一个参数限制了当版本数量少时，不会进行 BC 任务。但我们需要避免另一种情况，即某些 tablet 可能仅会导入少量批次的数据，因此当 Doris 发现一个 tablet 长时间没有执行过 BC 任务时，也会触发 BC 任务。这个参数就是控制这个时间的，默认是 86400，单位是秒。\n\n> 以上两个参数通常情况下不需要修改，在某些情况下如何需要想尽快合并基线数据，可以尝试改小 base_compaction_num_cumulative_deltas 参数。但这个参数只会影响到 “被选中的 tablet”。而 “被选中” 的前提是这个 tablet 的数据版本数量是最多的。\n\n### Cumulative Compaction\n\nCC 任务只会选取版本比 CP 大的数据版本。其本身的选取策略也比较简单，即从 CP 版本开始，依次向后选取数据版本。最终的数据版本集合由以下参数控制：\n\n* `min_cumulative_compaction_num_singleton_deltas`：一次 CC 任务最少的版本数量限制。这个配置是和`cumulative_size_based_compaction_lower_size_mbytes` 配置同时判断的。即如果版本数量小于阈值，并且数据量也小于阈值，则不会触发 CC 任务。以避免躲过不比较的 CC 任务。默认是5。\n\n* `max_cumulative_compaction_num_singleton_deltas`：一次 CC 任务最大的版本数量限制。以防止一次 CC 任务合并的版本数量过多，占用过多资源。默认是1000。\n\n* `cumulative_size_based_compaction_lower_size_mbytes`：一次 CC 任务最少的数据量，和min_cumulative_compaction_num_singleton_delta 同时判断。默认是 64，单位是 MB。\n\n简单来说，默认配置下，就是从 CP 版本开始往后选取 rowset。最少选5个，最多选 1000 个，然后判断数据量是否大于阈值即可。\n\nCC 任务还有一个重要步骤，就是在合并任务结束后，设置新的 Cumulative Point。CC 任务合并完成后，会产生一个合并后的新的数据版本，而我们要做的就是判断这个新的数据版是 “晋升” 到 BC 任务区，还是依然保留在 CC 任务区。举个例子：\n\n假设当前 CP 是 10。有一个 CC 任务合并了 [10-13] [14-14] [15-15] 后生成了 [10-15] 这个版本。如果决定将 [10-15] 版本移动到 BC 任务区，则需修改 CP 为 15，否则 CP 保持不变，依然为 10。\n\nCP 只会增加，不会减少。 以下参数决定了是否更新 CP：\n\n* `cumulative_size_based_promotion_ratio`：晋升比率。默认 0.05。\n\n* `cumulative_size_based_promotion_min_size_mbytes`：最小晋升大小，默认 64，单位 MB。\n\n* `cumulative_size_based_promotion_size_mbytes`：最大晋升大小，默认 1024，单位 MB。\n\n以上参数比较难理解，这里我们先解释下 “晋升” 的原则。一个 CC 任务生成的 rowset 的晋升原则，是其数据大小和基线数据的大小在 “同一量级”。这个类似 2048 小游戏，只有相同的数字才能合并形成更大的数字。而上面三个参数，就是用于判断一个新的rowset是否匹配基线数据的数量级。举例说明：\n\n在默认配置下，假设当前基线数据（即所有 CP 之前的数据版本）的数据量为 10GB，则晋升量级为 （10GB * 0.05）512MB。这个数值大于 64 MB 小于 1024 MB，满足条件。所以如果 CC 任务生成的新的 rowset 的大小大于 512 MB，则可以晋升，即 CP 增加。而假设基线数据为 50GB，则晋升量级为（50GB * 0.05）2.5GB。这个数值大于 64 MB 也大于 1024 MB，因此晋升量级会被调整为 1024 MB。所以如果 CC 任务生成的新的 rowset 的大小大于 1024 MB，则可以晋升，即 CP 增加。\n\n从上面的例子可以看出，`cumulative_size_based_promotion_ratio` 用于定义 “同一量级”，0.05 即表示数据量大于基线数据的 5% 的 rowset 都有晋升的可能，而 `cumulative_size_based_promotion_min_size_mbytes` 和 `cumulative_size_based_promotion_size_mbytes` 用于保证晋升不会过于频繁或过于严格。\n\n> 这三个参数会直接影响 BC 和 CC 任务的频率，尤其在高频导入场景下需要适当调整。我们会在后续文章中举例说明。\n\n## 其他 Compaction 参数和注意事项\n\n还有一些参数和 Compaction 相关，在某些情况下需要修改：\n\n* `disable_auto_compaction`：默认为 false，修改为 true 则会禁止 Compaction 操作。该参数仅在一些调试情况，或者 compaction 异常需要临时关闭的情况下才需使用。\n\n### Delete 灾难\n\n通过 `DELETE FROM` 语句执行的数据删除操作，在 Doris 中也会生成一个数据版本用于标记删除。这种类型的数据版本比较特殊，我们成为 “删除版本”。删除版本只能通过 Base Compaction 任务处理。因此在在遇到删除版本时，Cumulative Point 会强制增加，将删除版本移动到 BC 任务区。因此数据导入和删除交替发生的场景通常会导致 Compaction 灾难。比如以下版本序列：\n\n```\n[0-10]\n[11-11] 删除版本\n[12-12]\n[13-13] 删除版本\n[14-14]\n[15-15] 删除版本\n[16-16]\n[17-17] 删除版本\n...\n```\n\n在这种情况下，CC 任务几乎不会被触发（因为CC任务只能选择一个版本，而无法处理删除版本），所有版本都会交给 Base Compaction 处理，导致 Compaction 进度缓慢。目前Doris还无法很好的处理这种场景，因此需要在业务上尽量避免。\n\n## 未完待续\n\n本文介绍了 Doris Compaction 任务的生成逻辑和执行逻辑。并且介绍了相关控制参数。接下来的文章，将通过一些具体场景来介绍调整 Compaction 参数的思路，以满足业务需求。","slug":"doris-compaction-2","published":1,"updated":"2021-05-16T03:36:48.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoqwxupa0003ewjz1aajgte4","content":"<p>这是 Doris Compaction 调优系列文章的第二篇。本文介绍了 Doris Compaction 任务的生成逻辑和执行逻辑。并且介绍了相关控制参数。</p>\n<span id=\"more\"></span>\n\n<p>本文是 Compaction 调优系列文章的第二篇。在前一篇文章中我们介绍了Compaction的一些基本概念。这里我们回顾下两个重要概念：</p>\n<ol>\n<li><p>每个 BE 节点上的 Compaction 操作都是独立进行的。Compaction 的对象是单个 BE 节点上的全部数据分片。</p>\n</li>\n<li><p>Compaction 分为 Base Compaction(BC) 和 Cumulative Compaction(CC)，由Cumulative Point(CP) 划分，根据一定策略，选择一组rowset进行Compaction。</p>\n</li>\n</ol>\n<p>本文将继续从以下两个方面深入了解 Compaction</p>\n<ol>\n<li><p>Compaction 机制是如何挑选数据分片进行 Compaction 的。</p>\n</li>\n<li><p>对于一个数据分片，Compaction 机制是如何确定哪些数据版本参与 Compaction 的。</p>\n</li>\n</ol>\n<h2 id=\"数据分片选择策略\"><a href=\"#数据分片选择策略\" class=\"headerlink\" title=\"数据分片选择策略\"></a>数据分片选择策略</h2><p>Compaction 的目的是合并多个数据版本，一是避免在读取时大量的 Merge 操作，二是避免大量的数据版本导致的随机IO。因此，Compaction 策略的重点问题，就是如何选择合适的 tablet，以保证节点上不会出现数据版本过多的数据分片。</p>\n<h3 id=\"Compaction-分数\"><a href=\"#Compaction-分数\" class=\"headerlink\" title=\"Compaction 分数\"></a>Compaction 分数</h3><p>一个自然的想法，就是每次都选择数据版本最多的数据分片进行 Compaction。这个策略也是 Doris 的默认策略。这个策略在大部分场景下都能很好的工作。但是考虑到一种情况，就是版本多的分片，可能并不是最频繁访问的分片。而 Compaction 的目的就是优化读性能。那么有可能某一张 “写多读少” 表一直在 Compaction，而另一张 “读多写少” 的表不能及时的 Compaction，导致读性能变差。</p>\n<p>因此，Doris 在选择数据分片时还引入了 “读取频率” 的因素。“读取频率” 和 “版本数量” 会根据各自的权重，综合计算出一个 Compaction 分数，分数越高的分片，优先做 Compaction。这两个因素的权重由以下 BE 参数控制（取值越大，权重越高）：</p>\n<ul>\n<li><code>compaction_tablet_scan_frequency_factor</code>：“读取频率” 的权重值，默认为 0。</li>\n<li></li>\n<li><code>compaction_tablet_compaction_score_factor</code>：“版本数量” 的权重，默认为 1。</li>\n</ul>\n<blockquote>\n<p>“读取频率” 的权重值默认为0，即默认仅考虑 “版本数量”  这个因素。</p>\n</blockquote>\n<h3 id=\"生产者与消费者\"><a href=\"#生产者与消费者\" class=\"headerlink\" title=\"生产者与消费者\"></a>生产者与消费者</h3><p>Compaction 系统是一个 生产者-消费者 模型。由一个生产者线程负责选择需要做 Compaction 的数据分片，而多个消费者负责执行 Compaction 操作。</p>\n<p>生产者线程只有一个，会定期扫描所有 tablet 来选择合适的 compaction 对象。因为 Base Compaction 和 Cumulative Compaction 是不同类型的任务，因此目前的策略是每生成 9 个 CC 任务，生成一个 BC 任务。任务生成的频率由以下两个参数控制：</p>\n<ul>\n<li><code>cumulative_compaction_rounds_for_each_base_compaction_round</code>：多少个CC任务后生成一个BC任务。</li>\n<li></li>\n<li><code>generate_compaction_tasks_min_interval_ms</code>：任务生成的间隔。</li>\n</ul>\n<blockquote>\n<p>这两个参数通常情况下不需要调整。</p>\n</blockquote>\n<p>生产者线程产生的任务会被提交到消费者线程池。因为 Compaction 是一个IO密集型的任务，为了保证 Compaction 任务不会过多的占用IO资源，Doris 限制了每个磁盘上能够同时进行的 Compaction 任务数量，以及节点整体的任务数量，这些限制由以下参数控制：</p>\n<ul>\n<li><code>compaction_task_num_per_disk</code>：每个磁盘上的任务数，默认为2。该参数必须大于等于2，以保证 BC 和 CC 任务各自至少有一个线程。</li>\n<li></li>\n<li><code>max_compaction_threads</code>：消费者线程，即Compaction线程的总数。默认为 10。</li>\n</ul>\n<p>举个例子，假设一个 BE 节点配置了3个数据目录（即3块磁盘），每个磁盘上的任务数配置为2，总线程数为5。则同一时间，最多有5个 Compaction 任务在进行，而每块磁盘上最多有2个任务在进行。并且最多有3个 BC 任务在进行，因为每块盘上会自动预留一个线程给CC任务。</p>\n<p>另一方面，Compaction 任务同时也是一个内存密集型任务，因为其本质是一个多路归并排序的过程，每一路是一个数据版本。如果一个 Compaction 任务涉及的数据版本很多，则会占用更多的内存，如果仅限制任务数，而不考虑任务的内存开销，则有可能导致系统内存超限。因此，Doris 在上述任务个数限制之外，还增加了一个任务配额限制：</p>\n<ul>\n<li><code>total_permits_for_compaction_score</code>：Compaction 任务配额，默认 10000。</li>\n</ul>\n<p>每个 Compaction 任务都有一个配额，其数值就是任务涉及的数据版本数量。假设一个任务需要合并100个版本，则其配额为100。当正在运行的任务配额总和超过配置后，新的任务将被拒绝。</p>\n<p>三个配置共同决定了节点所能承受的 Compaction 任务数量。</p>\n<h2 id=\"数据版本选择策略\"><a href=\"#数据版本选择策略\" class=\"headerlink\" title=\"数据版本选择策略\"></a>数据版本选择策略</h2><p>一个 Compaction 任务对应的是一个数据分片（Tablet）。消费线程拿到一个 Compaction 任务后，会根据 Compaction 的任务类型，选择 tablet 中合适的数据版本（Rowset）进行数据合并。下面分别介绍 Base Compaction 和 Cumulative Compaction 的数据分片选择策略。</p>\n<h3 id=\"Base-Compaction\"><a href=\"#Base-Compaction\" class=\"headerlink\" title=\"Base Compaction\"></a>Base Compaction</h3><p>前文说过，BC 任务是增量数据和基线数据的合并任务。并且只有比 Cumulative Point（CP） 小的数据版本才会参与 BC 任务。因此，BC 任务的数据版本选取策略比较简单。</p>\n<p>首先，会选取所有版本在 0 到 CP之间的 rowset。然后根据以下几个配置参数，判断是否启动一个 BC 任务：</p>\n<ul>\n<li><code>base_compaction_num_cumulative_deltas</code>：一次 BC 任务最小版本数量限制。默认为5。该参数主要为了避免过多 BC 任务。当数据版本数量较少时，BC 是没有必要的。</li>\n<li></li>\n<li><code>base_compaction_interval_seconds_since_last_operation</code>：第一个参数限制了当版本数量少时，不会进行 BC 任务。但我们需要避免另一种情况，即某些 tablet 可能仅会导入少量批次的数据，因此当 Doris 发现一个 tablet 长时间没有执行过 BC 任务时，也会触发 BC 任务。这个参数就是控制这个时间的，默认是 86400，单位是秒。</li>\n</ul>\n<blockquote>\n<p>以上两个参数通常情况下不需要修改，在某些情况下如何需要想尽快合并基线数据，可以尝试改小 base_compaction_num_cumulative_deltas 参数。但这个参数只会影响到 “被选中的 tablet”。而 “被选中” 的前提是这个 tablet 的数据版本数量是最多的。</p>\n</blockquote>\n<h3 id=\"Cumulative-Compaction\"><a href=\"#Cumulative-Compaction\" class=\"headerlink\" title=\"Cumulative Compaction\"></a>Cumulative Compaction</h3><p>CC 任务只会选取版本比 CP 大的数据版本。其本身的选取策略也比较简单，即从 CP 版本开始，依次向后选取数据版本。最终的数据版本集合由以下参数控制：</p>\n<ul>\n<li><p><code>min_cumulative_compaction_num_singleton_deltas</code>：一次 CC 任务最少的版本数量限制。这个配置是和<code>cumulative_size_based_compaction_lower_size_mbytes</code> 配置同时判断的。即如果版本数量小于阈值，并且数据量也小于阈值，则不会触发 CC 任务。以避免躲过不比较的 CC 任务。默认是5。</p>\n</li>\n<li><p><code>max_cumulative_compaction_num_singleton_deltas</code>：一次 CC 任务最大的版本数量限制。以防止一次 CC 任务合并的版本数量过多，占用过多资源。默认是1000。</p>\n</li>\n<li><p><code>cumulative_size_based_compaction_lower_size_mbytes</code>：一次 CC 任务最少的数据量，和min_cumulative_compaction_num_singleton_delta 同时判断。默认是 64，单位是 MB。</p>\n</li>\n</ul>\n<p>简单来说，默认配置下，就是从 CP 版本开始往后选取 rowset。最少选5个，最多选 1000 个，然后判断数据量是否大于阈值即可。</p>\n<p>CC 任务还有一个重要步骤，就是在合并任务结束后，设置新的 Cumulative Point。CC 任务合并完成后，会产生一个合并后的新的数据版本，而我们要做的就是判断这个新的数据版是 “晋升” 到 BC 任务区，还是依然保留在 CC 任务区。举个例子：</p>\n<p>假设当前 CP 是 10。有一个 CC 任务合并了 [10-13] [14-14] [15-15] 后生成了 [10-15] 这个版本。如果决定将 [10-15] 版本移动到 BC 任务区，则需修改 CP 为 15，否则 CP 保持不变，依然为 10。</p>\n<p>CP 只会增加，不会减少。 以下参数决定了是否更新 CP：</p>\n<ul>\n<li><p><code>cumulative_size_based_promotion_ratio</code>：晋升比率。默认 0.05。</p>\n</li>\n<li><p><code>cumulative_size_based_promotion_min_size_mbytes</code>：最小晋升大小，默认 64，单位 MB。</p>\n</li>\n<li><p><code>cumulative_size_based_promotion_size_mbytes</code>：最大晋升大小，默认 1024，单位 MB。</p>\n</li>\n</ul>\n<p>以上参数比较难理解，这里我们先解释下 “晋升” 的原则。一个 CC 任务生成的 rowset 的晋升原则，是其数据大小和基线数据的大小在 “同一量级”。这个类似 2048 小游戏，只有相同的数字才能合并形成更大的数字。而上面三个参数，就是用于判断一个新的rowset是否匹配基线数据的数量级。举例说明：</p>\n<p>在默认配置下，假设当前基线数据（即所有 CP 之前的数据版本）的数据量为 10GB，则晋升量级为 （10GB * 0.05）512MB。这个数值大于 64 MB 小于 1024 MB，满足条件。所以如果 CC 任务生成的新的 rowset 的大小大于 512 MB，则可以晋升，即 CP 增加。而假设基线数据为 50GB，则晋升量级为（50GB * 0.05）2.5GB。这个数值大于 64 MB 也大于 1024 MB，因此晋升量级会被调整为 1024 MB。所以如果 CC 任务生成的新的 rowset 的大小大于 1024 MB，则可以晋升，即 CP 增加。</p>\n<p>从上面的例子可以看出，<code>cumulative_size_based_promotion_ratio</code> 用于定义 “同一量级”，0.05 即表示数据量大于基线数据的 5% 的 rowset 都有晋升的可能，而 <code>cumulative_size_based_promotion_min_size_mbytes</code> 和 <code>cumulative_size_based_promotion_size_mbytes</code> 用于保证晋升不会过于频繁或过于严格。</p>\n<blockquote>\n<p>这三个参数会直接影响 BC 和 CC 任务的频率，尤其在高频导入场景下需要适当调整。我们会在后续文章中举例说明。</p>\n</blockquote>\n<h2 id=\"其他-Compaction-参数和注意事项\"><a href=\"#其他-Compaction-参数和注意事项\" class=\"headerlink\" title=\"其他 Compaction 参数和注意事项\"></a>其他 Compaction 参数和注意事项</h2><p>还有一些参数和 Compaction 相关，在某些情况下需要修改：</p>\n<ul>\n<li><code>disable_auto_compaction</code>：默认为 false，修改为 true 则会禁止 Compaction 操作。该参数仅在一些调试情况，或者 compaction 异常需要临时关闭的情况下才需使用。</li>\n</ul>\n<h3 id=\"Delete-灾难\"><a href=\"#Delete-灾难\" class=\"headerlink\" title=\"Delete 灾难\"></a>Delete 灾难</h3><p>通过 <code>DELETE FROM</code> 语句执行的数据删除操作，在 Doris 中也会生成一个数据版本用于标记删除。这种类型的数据版本比较特殊，我们成为 “删除版本”。删除版本只能通过 Base Compaction 任务处理。因此在在遇到删除版本时，Cumulative Point 会强制增加，将删除版本移动到 BC 任务区。因此数据导入和删除交替发生的场景通常会导致 Compaction 灾难。比如以下版本序列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0-10]</span><br><span class=\"line\">[11-11] 删除版本</span><br><span class=\"line\">[12-12]</span><br><span class=\"line\">[13-13] 删除版本</span><br><span class=\"line\">[14-14]</span><br><span class=\"line\">[15-15] 删除版本</span><br><span class=\"line\">[16-16]</span><br><span class=\"line\">[17-17] 删除版本</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，CC 任务几乎不会被触发（因为CC任务只能选择一个版本，而无法处理删除版本），所有版本都会交给 Base Compaction 处理，导致 Compaction 进度缓慢。目前Doris还无法很好的处理这种场景，因此需要在业务上尽量避免。</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>本文介绍了 Doris Compaction 任务的生成逻辑和执行逻辑。并且介绍了相关控制参数。接下来的文章，将通过一些具体场景来介绍调整 Compaction 参数的思路，以满足业务需求。</p>\n","site":{"data":{}},"excerpt":"<p>这是 Doris Compaction 调优系列文章的第二篇。本文介绍了 Doris Compaction 任务的生成逻辑和执行逻辑。并且介绍了相关控制参数。</p>","more":"<p>本文是 Compaction 调优系列文章的第二篇。在前一篇文章中我们介绍了Compaction的一些基本概念。这里我们回顾下两个重要概念：</p>\n<ol>\n<li><p>每个 BE 节点上的 Compaction 操作都是独立进行的。Compaction 的对象是单个 BE 节点上的全部数据分片。</p>\n</li>\n<li><p>Compaction 分为 Base Compaction(BC) 和 Cumulative Compaction(CC)，由Cumulative Point(CP) 划分，根据一定策略，选择一组rowset进行Compaction。</p>\n</li>\n</ol>\n<p>本文将继续从以下两个方面深入了解 Compaction</p>\n<ol>\n<li><p>Compaction 机制是如何挑选数据分片进行 Compaction 的。</p>\n</li>\n<li><p>对于一个数据分片，Compaction 机制是如何确定哪些数据版本参与 Compaction 的。</p>\n</li>\n</ol>\n<h2 id=\"数据分片选择策略\"><a href=\"#数据分片选择策略\" class=\"headerlink\" title=\"数据分片选择策略\"></a>数据分片选择策略</h2><p>Compaction 的目的是合并多个数据版本，一是避免在读取时大量的 Merge 操作，二是避免大量的数据版本导致的随机IO。因此，Compaction 策略的重点问题，就是如何选择合适的 tablet，以保证节点上不会出现数据版本过多的数据分片。</p>\n<h3 id=\"Compaction-分数\"><a href=\"#Compaction-分数\" class=\"headerlink\" title=\"Compaction 分数\"></a>Compaction 分数</h3><p>一个自然的想法，就是每次都选择数据版本最多的数据分片进行 Compaction。这个策略也是 Doris 的默认策略。这个策略在大部分场景下都能很好的工作。但是考虑到一种情况，就是版本多的分片，可能并不是最频繁访问的分片。而 Compaction 的目的就是优化读性能。那么有可能某一张 “写多读少” 表一直在 Compaction，而另一张 “读多写少” 的表不能及时的 Compaction，导致读性能变差。</p>\n<p>因此，Doris 在选择数据分片时还引入了 “读取频率” 的因素。“读取频率” 和 “版本数量” 会根据各自的权重，综合计算出一个 Compaction 分数，分数越高的分片，优先做 Compaction。这两个因素的权重由以下 BE 参数控制（取值越大，权重越高）：</p>\n<ul>\n<li><code>compaction_tablet_scan_frequency_factor</code>：“读取频率” 的权重值，默认为 0。</li>\n<li></li>\n<li><code>compaction_tablet_compaction_score_factor</code>：“版本数量” 的权重，默认为 1。</li>\n</ul>\n<blockquote>\n<p>“读取频率” 的权重值默认为0，即默认仅考虑 “版本数量”  这个因素。</p>\n</blockquote>\n<h3 id=\"生产者与消费者\"><a href=\"#生产者与消费者\" class=\"headerlink\" title=\"生产者与消费者\"></a>生产者与消费者</h3><p>Compaction 系统是一个 生产者-消费者 模型。由一个生产者线程负责选择需要做 Compaction 的数据分片，而多个消费者负责执行 Compaction 操作。</p>\n<p>生产者线程只有一个，会定期扫描所有 tablet 来选择合适的 compaction 对象。因为 Base Compaction 和 Cumulative Compaction 是不同类型的任务，因此目前的策略是每生成 9 个 CC 任务，生成一个 BC 任务。任务生成的频率由以下两个参数控制：</p>\n<ul>\n<li><code>cumulative_compaction_rounds_for_each_base_compaction_round</code>：多少个CC任务后生成一个BC任务。</li>\n<li></li>\n<li><code>generate_compaction_tasks_min_interval_ms</code>：任务生成的间隔。</li>\n</ul>\n<blockquote>\n<p>这两个参数通常情况下不需要调整。</p>\n</blockquote>\n<p>生产者线程产生的任务会被提交到消费者线程池。因为 Compaction 是一个IO密集型的任务，为了保证 Compaction 任务不会过多的占用IO资源，Doris 限制了每个磁盘上能够同时进行的 Compaction 任务数量，以及节点整体的任务数量，这些限制由以下参数控制：</p>\n<ul>\n<li><code>compaction_task_num_per_disk</code>：每个磁盘上的任务数，默认为2。该参数必须大于等于2，以保证 BC 和 CC 任务各自至少有一个线程。</li>\n<li></li>\n<li><code>max_compaction_threads</code>：消费者线程，即Compaction线程的总数。默认为 10。</li>\n</ul>\n<p>举个例子，假设一个 BE 节点配置了3个数据目录（即3块磁盘），每个磁盘上的任务数配置为2，总线程数为5。则同一时间，最多有5个 Compaction 任务在进行，而每块磁盘上最多有2个任务在进行。并且最多有3个 BC 任务在进行，因为每块盘上会自动预留一个线程给CC任务。</p>\n<p>另一方面，Compaction 任务同时也是一个内存密集型任务，因为其本质是一个多路归并排序的过程，每一路是一个数据版本。如果一个 Compaction 任务涉及的数据版本很多，则会占用更多的内存，如果仅限制任务数，而不考虑任务的内存开销，则有可能导致系统内存超限。因此，Doris 在上述任务个数限制之外，还增加了一个任务配额限制：</p>\n<ul>\n<li><code>total_permits_for_compaction_score</code>：Compaction 任务配额，默认 10000。</li>\n</ul>\n<p>每个 Compaction 任务都有一个配额，其数值就是任务涉及的数据版本数量。假设一个任务需要合并100个版本，则其配额为100。当正在运行的任务配额总和超过配置后，新的任务将被拒绝。</p>\n<p>三个配置共同决定了节点所能承受的 Compaction 任务数量。</p>\n<h2 id=\"数据版本选择策略\"><a href=\"#数据版本选择策略\" class=\"headerlink\" title=\"数据版本选择策略\"></a>数据版本选择策略</h2><p>一个 Compaction 任务对应的是一个数据分片（Tablet）。消费线程拿到一个 Compaction 任务后，会根据 Compaction 的任务类型，选择 tablet 中合适的数据版本（Rowset）进行数据合并。下面分别介绍 Base Compaction 和 Cumulative Compaction 的数据分片选择策略。</p>\n<h3 id=\"Base-Compaction\"><a href=\"#Base-Compaction\" class=\"headerlink\" title=\"Base Compaction\"></a>Base Compaction</h3><p>前文说过，BC 任务是增量数据和基线数据的合并任务。并且只有比 Cumulative Point（CP） 小的数据版本才会参与 BC 任务。因此，BC 任务的数据版本选取策略比较简单。</p>\n<p>首先，会选取所有版本在 0 到 CP之间的 rowset。然后根据以下几个配置参数，判断是否启动一个 BC 任务：</p>\n<ul>\n<li><code>base_compaction_num_cumulative_deltas</code>：一次 BC 任务最小版本数量限制。默认为5。该参数主要为了避免过多 BC 任务。当数据版本数量较少时，BC 是没有必要的。</li>\n<li></li>\n<li><code>base_compaction_interval_seconds_since_last_operation</code>：第一个参数限制了当版本数量少时，不会进行 BC 任务。但我们需要避免另一种情况，即某些 tablet 可能仅会导入少量批次的数据，因此当 Doris 发现一个 tablet 长时间没有执行过 BC 任务时，也会触发 BC 任务。这个参数就是控制这个时间的，默认是 86400，单位是秒。</li>\n</ul>\n<blockquote>\n<p>以上两个参数通常情况下不需要修改，在某些情况下如何需要想尽快合并基线数据，可以尝试改小 base_compaction_num_cumulative_deltas 参数。但这个参数只会影响到 “被选中的 tablet”。而 “被选中” 的前提是这个 tablet 的数据版本数量是最多的。</p>\n</blockquote>\n<h3 id=\"Cumulative-Compaction\"><a href=\"#Cumulative-Compaction\" class=\"headerlink\" title=\"Cumulative Compaction\"></a>Cumulative Compaction</h3><p>CC 任务只会选取版本比 CP 大的数据版本。其本身的选取策略也比较简单，即从 CP 版本开始，依次向后选取数据版本。最终的数据版本集合由以下参数控制：</p>\n<ul>\n<li><p><code>min_cumulative_compaction_num_singleton_deltas</code>：一次 CC 任务最少的版本数量限制。这个配置是和<code>cumulative_size_based_compaction_lower_size_mbytes</code> 配置同时判断的。即如果版本数量小于阈值，并且数据量也小于阈值，则不会触发 CC 任务。以避免躲过不比较的 CC 任务。默认是5。</p>\n</li>\n<li><p><code>max_cumulative_compaction_num_singleton_deltas</code>：一次 CC 任务最大的版本数量限制。以防止一次 CC 任务合并的版本数量过多，占用过多资源。默认是1000。</p>\n</li>\n<li><p><code>cumulative_size_based_compaction_lower_size_mbytes</code>：一次 CC 任务最少的数据量，和min_cumulative_compaction_num_singleton_delta 同时判断。默认是 64，单位是 MB。</p>\n</li>\n</ul>\n<p>简单来说，默认配置下，就是从 CP 版本开始往后选取 rowset。最少选5个，最多选 1000 个，然后判断数据量是否大于阈值即可。</p>\n<p>CC 任务还有一个重要步骤，就是在合并任务结束后，设置新的 Cumulative Point。CC 任务合并完成后，会产生一个合并后的新的数据版本，而我们要做的就是判断这个新的数据版是 “晋升” 到 BC 任务区，还是依然保留在 CC 任务区。举个例子：</p>\n<p>假设当前 CP 是 10。有一个 CC 任务合并了 [10-13] [14-14] [15-15] 后生成了 [10-15] 这个版本。如果决定将 [10-15] 版本移动到 BC 任务区，则需修改 CP 为 15，否则 CP 保持不变，依然为 10。</p>\n<p>CP 只会增加，不会减少。 以下参数决定了是否更新 CP：</p>\n<ul>\n<li><p><code>cumulative_size_based_promotion_ratio</code>：晋升比率。默认 0.05。</p>\n</li>\n<li><p><code>cumulative_size_based_promotion_min_size_mbytes</code>：最小晋升大小，默认 64，单位 MB。</p>\n</li>\n<li><p><code>cumulative_size_based_promotion_size_mbytes</code>：最大晋升大小，默认 1024，单位 MB。</p>\n</li>\n</ul>\n<p>以上参数比较难理解，这里我们先解释下 “晋升” 的原则。一个 CC 任务生成的 rowset 的晋升原则，是其数据大小和基线数据的大小在 “同一量级”。这个类似 2048 小游戏，只有相同的数字才能合并形成更大的数字。而上面三个参数，就是用于判断一个新的rowset是否匹配基线数据的数量级。举例说明：</p>\n<p>在默认配置下，假设当前基线数据（即所有 CP 之前的数据版本）的数据量为 10GB，则晋升量级为 （10GB * 0.05）512MB。这个数值大于 64 MB 小于 1024 MB，满足条件。所以如果 CC 任务生成的新的 rowset 的大小大于 512 MB，则可以晋升，即 CP 增加。而假设基线数据为 50GB，则晋升量级为（50GB * 0.05）2.5GB。这个数值大于 64 MB 也大于 1024 MB，因此晋升量级会被调整为 1024 MB。所以如果 CC 任务生成的新的 rowset 的大小大于 1024 MB，则可以晋升，即 CP 增加。</p>\n<p>从上面的例子可以看出，<code>cumulative_size_based_promotion_ratio</code> 用于定义 “同一量级”，0.05 即表示数据量大于基线数据的 5% 的 rowset 都有晋升的可能，而 <code>cumulative_size_based_promotion_min_size_mbytes</code> 和 <code>cumulative_size_based_promotion_size_mbytes</code> 用于保证晋升不会过于频繁或过于严格。</p>\n<blockquote>\n<p>这三个参数会直接影响 BC 和 CC 任务的频率，尤其在高频导入场景下需要适当调整。我们会在后续文章中举例说明。</p>\n</blockquote>\n<h2 id=\"其他-Compaction-参数和注意事项\"><a href=\"#其他-Compaction-参数和注意事项\" class=\"headerlink\" title=\"其他 Compaction 参数和注意事项\"></a>其他 Compaction 参数和注意事项</h2><p>还有一些参数和 Compaction 相关，在某些情况下需要修改：</p>\n<ul>\n<li><code>disable_auto_compaction</code>：默认为 false，修改为 true 则会禁止 Compaction 操作。该参数仅在一些调试情况，或者 compaction 异常需要临时关闭的情况下才需使用。</li>\n</ul>\n<h3 id=\"Delete-灾难\"><a href=\"#Delete-灾难\" class=\"headerlink\" title=\"Delete 灾难\"></a>Delete 灾难</h3><p>通过 <code>DELETE FROM</code> 语句执行的数据删除操作，在 Doris 中也会生成一个数据版本用于标记删除。这种类型的数据版本比较特殊，我们成为 “删除版本”。删除版本只能通过 Base Compaction 任务处理。因此在在遇到删除版本时，Cumulative Point 会强制增加，将删除版本移动到 BC 任务区。因此数据导入和删除交替发生的场景通常会导致 Compaction 灾难。比如以下版本序列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0-10]</span><br><span class=\"line\">[11-11] 删除版本</span><br><span class=\"line\">[12-12]</span><br><span class=\"line\">[13-13] 删除版本</span><br><span class=\"line\">[14-14]</span><br><span class=\"line\">[15-15] 删除版本</span><br><span class=\"line\">[16-16]</span><br><span class=\"line\">[17-17] 删除版本</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，CC 任务几乎不会被触发（因为CC任务只能选择一个版本，而无法处理删除版本），所有版本都会交给 Base Compaction 处理，导致 Compaction 进度缓慢。目前Doris还无法很好的处理这种场景，因此需要在业务上尽量避免。</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>本文介绍了 Doris Compaction 任务的生成逻辑和执行逻辑。并且介绍了相关控制参数。接下来的文章，将通过一些具体场景来介绍调整 Compaction 参数的思路，以满足业务需求。</p>"},{"title":"Doris Compaction 调优指南（3）","date":"2021-05-16T04:30:31.000Z","keywords":"doris","_content":"\n本文是 Compaction 调优系列文章的第三篇。在前两篇文章中我们介绍了Compaction的一些基本概念，以及Compaction选择策略和执行过程。本篇我们将从实际使用场景的角度出发，介绍 Compaction 的调优思路和策略。通过本文读者将了解到 Compaction 相关的日志分析、参数调整和 API 的使用。\n\n<!--more-->\n\n## 什么情况下需要调整 Compaction 参数\n\nCompaction 的目的是合并多个数据版本，一是避免在读取时大量的 Merge 操作，二是避免大量的数据版本导致的随机IO。并且在这个过程中，Compaction 操作不能占用太多的系统资源。所以我们可以以结果为导向，从以下两个方面反推是否需要调整 Compaction 策略。\n\n1. 检查数据版本是否有堆积。\n\n2. 检查 IO 和内存资源是否被 Compaction 任务过多的占用。\n\n### 查看数据版本数量变化趋势\n\nDoris 提供数据版本数量的监控数据。如果你部署了 Prometheus + Grafana 的监控，则可以通过 Grafana 仪表盘的 BE Base Compaction Score 和 BE Cumu Compaction Score 图表查看到这个监控数据的趋势图：\n\n<div style=\"width:70%;margin:auto\">{% asset_img monitor1.png \"Compaction Score 监控图1\" %}</div>\n\n> 这个图表展示的是每个 BE 节点，所有 Tablet 中数据版本最多的那个 Tablet 的版本数量，可以反映出当前版本堆积情况。\n\n> 部署方式参阅：http://doris.incubator.apache.org/master/zh-CN/administrator-guide/operation/monitor-alert.html\n\n如果没有安装这个监控，Doris 版本在 0.14.7 版本以上，也可以通过以下命令在命令行查看这个监控数据的趋势图：\n\n```sql\nmysql> ADMIN SHOW BACKEND METRIC (\"nodes\" = \"30746894\", \"metrics\" = \"BE_BASE_COMPACTION_SCORE\", \"time\" = \"last 4 hours\");\nmysql> ADMIN SHOW BACKEND METRIC (\"nodes\" = \"30746894\", \"metrics\" = \"BE_CUMU_COMPACTION_SCORE\", \"time\" = \"last 4 hours\");\n```\n\n<div style=\"width:70%;margin:auto\">{% asset_img monitor2.png \"Compaction Score 监控图2\" %}</div>\n\n> 该命令具体帮助可执行 HELP ADMIN SHOW METRIC 查看，或参阅 [Doris功能介绍-内置监控]\n\n注意这里有两个指标，分别表示 Base Compaction 和 Cumulative Compaction 所对应的版本数量。在大部分情况下，我们只需要查看 Cumulative Compaction 的指标，即可大致了解集群的数据版本堆积情况。\n\n版本是否堆积没有一个明确的界限，而是根据使用场景和查询延迟进行判断的一个经验值。我们可以按照以下步骤进行简单的推断：\n\n1. 观察数据版本数量的趋势，如果趋势平稳，则说明 Compaction 和导入速度基本持平。如果呈上升态势，则说明 Compaction 速度跟不上导入速度了。如果呈下降态势，说明 Compaction 速度超过了导入速度。如果呈上升态势，或在平稳状态但数值较高，则需要考虑调整 Compaction 参数以加快 Compaction 的进度。\n\n2. 通常版本数量维持在 100 以内可以视为正常。而在大部分批量导入或低频导入场景下，版本数量通常为10-20甚至更低。\n\n### 查看Compaction资源占用\n\nCompaction 资源占用主要是 IO 和 内存。\n\n对于 Compaction 占用的内存，可以在浏览器打开以下链接：\n\n`http://be_host:webserver_port/mem_tracker`\n\n在搜索框中输入 AutoCompaction：\n\n<div style=\"width:70%;margin:auto\">{% asset_img memtracker.webp \"AutoCompaction\" %}</div>\n\n则可以查看当前Compaction的内存开销和历史峰值开销。\n\n而对于 IO 操作，目前还没有提供单独的 Compaction 操作的 IO 监控，我们只能根据集群整体的 IO 利用率情况来做判断。我们可以查看监控图 Disk IO util：\n\n<div style=\"width:70%;margin:auto\">{% asset_img monitor3.png \"Disk IO util\" %}</div>\n\n或者通过命令在命令行查看：\n\n```sql\nmysql> ADMIN SHOW BACKEND METRIC (\"nodes\" = \"30746894\", \"metrics\" = \"BE_DISK_IO\", \"time\" = \"last 4 hours\");\n```\n\n这个监控展示的是每个 BE 节点上磁盘的 IO util 指标。数值越高表示IO越繁忙。当然大部分情况下 IO 资源都是查询请求消耗的，这个监控主要用于指导我们是否需要增加或减少 Compaction 任务数。\n\n## Compaction 调优策略\n\n如果版本数量有上升趋势或者数值较高，则可以从以下两方面优化 Compaction：\n\n1. 修改 Compaction 线程数，使得同时能够执行更多的 Compaction 任务。\n\n2. 优化单个 Compaction 的执行逻辑，使数据版本数量维持在一个合理范围。\n\n### 优化前的准备工作\n\n在优化 Compaction 执行逻辑之前，我们需要使用一些命令来进一步查看一些Compaction的细节信息。\n\n首先，我们通过监控图找到一个版本数量最高的 BE 节点。然后执行以下命令分析日志：\n\n```shell\n$> grep \"succeed to do base\" log/be.INFO.log.20210505-142010 |tail -n 100\n$> grep \"succeed to do cumu\" log/be.INFO.log.20210505-142010 |tail -n 100\n```\n\n以上两个命令可以查看最近100个执行完成的 compaction 任务：\n\n```\nI0505 17:06:56.143455   675 compaction.cpp:135] succeed to do cumulative compaction. tablet=106827682.505347040.d040c1cdf71e5c95-3a002a06127ccd86, output_version=2-2631, current_max_version=2633, disk=/home/disk6/palo.HDD, segments=57. elapsed time=2.29371s. cumulative_compaction_policy=SIZE_BASED.\nI0505 17:06:56.520058   666 compaction.cpp:135] succeed to do cumulative compaction. tablet=106822189.1661856168.654562832a620ea6-46fe84c73ea84795, output_version=2-3247, current_max_version=3250, disk=/home/disk2/palo.HDD, segments=22. elapsed time=2.66858s. cumulative_compaction_policy=SIZE_BASED.\n```\n\n通过日志时间可以判断 Compaction 是否在持续正确的执行，通过 elapsed time 可以观察每个任务的执行时间。\n\n我们还可以执行以下命令展示最近100个 compaction 任务的配额（permits）：\n\n```\n$> grep \"permits\" log/be.INFO |tail -n 100\n​\nI0505 17:04:07.120920   667 compaction.cpp:83] start cumulative compaction. tablet=106827970.777011641.9c474de1b8ba9199-4addeb135d6834ac, output_version=2-2623, permits: 39\nI0505 17:04:13.898777   672 compaction.cpp:83] start cumulative compaction. tablet=106822777.1948936074.a44ac9462e79b76d-4a33ee39559bb0bf, output_version=2-3238, permits: 22\n```\n\n配额和版本数量成正比。\n\n我们可以找到 permits 较大的一个任务对应的 tablet id，如上图permit 为 39 的任务的 tablet id 为 106827970，然后继续分析这个 tablet 的 compaction 情况。\n\n通过 MySQL 客户端连接 Doris 集群后，执行：\n\n```sql\nmysql> show tablet 106827970;\n+--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+\n| DbName                   | TableName | PartitionName | IndexName | DbId    | TableId  | PartitionId | IndexId  | IsSync | DetailCmd                                                                  |\n+--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+\n| default_cluster:test     | tbl1      | p20210505     | tbl1      | 3828954 | 63708800 | 106826829   | 63709761 | true   | SHOW PROC '/dbs/3828954/63708800/partitions/106826829/63709761/106827970'; |\n+--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+\n```\n\n然后执行后面的 SHOW PROC 语句，我们可以获得这个 tablet 所有副本的详细信息。其中 VersionCount 列表示对应副本的数据版本数量。我们可以选取一个 VersionCount 较大的副本，在浏览器打开 CompactionStatus 列显示的 URL，得到如下Json结果：\n\n```json\n{\n    \"cumulative policy type\": \"SIZE_BASED\",\n    \"cumulative point\": 18438,\n    \"last cumulative failure time\": \"1970-01-01 08:00:00.000\",\n    \"last base failure time\": \"1970-01-01 08:00:00.000\",\n    \"last cumulative success time\": \"2021-05-05 17:18:48.904\",\n    \"last base success time\": \"2021-05-05 16:14:49.786\",\n    \"rowsets\": [\n        \"[0-17444] 13 DATA NONOVERLAPPING 0200000000b1fb8d344f83103113563dd81740036795499d 2.86 GB\",\n        \"[17445-17751] 1 DATA NONOVERLAPPING 0200000000b25183344f83103113563dd81740036795499d 68.61 MB\",\n        \"[17752-18089] 1 DATA NONOVERLAPPING 0200000000b2b9a2344f83103113563dd81740036795499d 74.52 MB\",\n        \"[18090-18437] 1 DATA NONOVERLAPPING 0200000000b32686344f83103113563dd81740036795499d 76.41 MB\",\n        \"[18438-18678] 1 DATA NONOVERLAPPING 0200000000b37084344f83103113563dd81740036795499d 53.07 MB\",\n        \"[18679-18679] 1 DATA NONOVERLAPPING 0200000000b36d87344f83103113563dd81740036795499d 3.11 KB\",\n        \"[18680-18680] 1 DATA NONOVERLAPPING 0200000000b36d70344f83103113563dd81740036795499d 258.40 KB\",\n        \"[18681-18681] 1 DATA NONOVERLAPPING 0200000000b36da0344f83103113563dd81740036795499d 266.98 KB\",\n    ],\n    \"stale_rowsets\": [\n    ],\n    \"stale version path\": [\n    ]\n}\n```\n\n这里我们可以看到一个 tablet 的 Cumulative Point，最近一次成功、失败的 BC/CC 任务时间，以及每个 rowset 的版本信息。如上面这个示例，我们可以得出以下结论：\n\n1. 基线数据量大约在2-3GB，增量rowset增长到几十MB后就会晋升到BC任务区。\n\n2. 新增rowset数据量很小，且版本增长较快，说明这是一个高频小批量的导入场景。\n\n我们还可以进一步的通过以下命令分析指定 tablet id 的日志：\n\n```\n# 查看 tablet 48062815 最近十个任务的配额情况\n$> grep permits log/be.INFO |grep 48062815 |tail -n 10\n\n# 查看 tablet 48062815 最近十个执行完成的 compaction 任务\n$> grep \"succeed to do\" log/be.INFO |grep 48062815 |tail -n 10\n```\n\n另外，我们还可以在浏览器打开以下 URL，查看一个 BE 节点当前正在执行的 compaction 任务：\n\n```\nbe_host:webserver_port/api/compaction/run_status\n```\n\n```json\n{\n    \"CumulativeCompaction\": {\n        \"/home/disk2/palo\": [],\n        \"/home/disk1/palo\": [\n            \"48061239\"\n        ]\n    },\n    \"BaseCompaction\": {\n        \"/home/disk2/palo\": [],\n        \"/home/disk1/palo\": [\n            \"48062815\",\n            \"48061276\"\n        ]\n    }\n}\n```\n\n这个接口可以看到每个磁盘上当前正在执行的 compaction 任务。\n\n通过以上一系列的分析，我们应该可以对系统的 Compaction 情况有以下判断：\n\n1. Compaction 任务的执行频率、每个任务大致的执行耗时。\n\n2. 指定节点数据版本数量的变化情况。\n\n2. 指定 tablet 数据版本的变化情况，以及 compaction 的频率。\n\n这些结论将指导我们对 Compaction 进行调优。\n\n### 修改 Compaction 线程数\n\n增加 Compaction 线程数是一个非常直接的加速 Compaction 的方法。但是更多的任务意味着更大的 IO 和 内存开销。尤其在机械磁盘上，因为随机读写问题，有时可能单线程串行执行的效率会高于多线程并行执行。Doris 默认配置为每块盘两个 Compaction 任务（这也是最小的合法配置），最多 10 个任务。如果磁盘数量多于 5，在内存允许的情况下，可以修改 `max_compaction_threads` 参数增加总任务数，以保证每块盘可以执行两个 Compaction 任务。\n\n对于机械磁盘，不建议增加每块盘的任务数。对于固态硬盘，可以考虑修改 `compaction_task_num_per_disk` 参数适当增加每块盘的任务数，如修改为 4。注意修改这个参数的同时可能还需同步修改 `max_compaction_threads`，使得 `max_compaction_threads` 大于等于 `compaction_task_num_per_disk * 磁盘数量`。\n\n### 优化单个 Compaction 任务逻辑\n\n这个优化方式比较复杂，我们尝试从几个场景出发来说明：\n\n**场景一：基线数据量大，Base Compaction 任务执行时间长。**\n\nBC 任务执行时间长，意味着一个任务会长时间占用 Compaction 工作线程，从而导致其他 tablet 的 compaction 任务时间被挤占。如果是因为 0 号版本的基线数据量较大导致，则我们可以考虑尽量推迟增量rowset 晋升到 BC 任务区的时间。以下两个参数将影响这个逻辑：\n\n* `cumulative_size_based_promotion_ratio`：默认 0.05，基线数据量乘以这个系数，即晋升阈值。可以调大这个系数来提高晋升阈值。\n\n* `cumulative_size_based_promotion_size_mbytes`：默认 1024MB。如果增量rowset的数据量大于这个值，则会忽略第一个参数的阈值直接晋升。因此需要同时调整这个参数来提升晋升阈值。\n\n当然，提升晋升阈值，会导致单个 BC 任务需要处理更大的数据量，耗时更长，但是总体的数据量会减少。举个例子。基线数据大小为 1024GB，假设晋升阈值分别为 100MB 和 200MB。数据导入速度为 100MB/分钟。每5个版本执行一次 BC。那么理论上在10分钟内，阈值为 100MB 时，BC 任务处理的总数据量为 (1024 + 100 * 5）* 2 = 3048MB。阈值为 200MB 是，BC 任务处理的总数据量为 (1024 + 200 * 5) = 2024 MB。\n\n**场景二：增量数据版本数量增长较快，Cumulative Compaction 处理过多版本，耗时较长。**\n\n`max_cumulative_compaction_num_singleton_deltas` 参数控制一个 CC 任务最多合并多少个数据版本，默认值为 1000。我们考虑这样一种场景：针对某一个 tablet，其数据版本的增长速度为 1个/秒。而其 CC 任务的执行时间 + 调度时间是 1000秒（即单个 CC 任务的执行时间加上Compaction再一次调度到这个 tablet 的时间总和）。那么我们可能会看到这个 tablet 的版本数量在 1-1000之间浮动（这里我们忽略基线版本数量）。因为在下一次 CC 任务执行前的 1000 秒内，又会累积 1000 个版本。\n\n这种情况可能导致这个 tablet 的读取效率很不稳定。这时我们可以尝试调小 max_cumulative_compaction_num_singleton_deltas 这个参数，这样一个 CC 所要合并的版本数更少，执行时间更短，执行频率会更高。还是刚才这个场景，假设参数调整到500，而对应的 CC 任务的执行时间 + 调度时间也降低到 500，则理论上这个 tablet 的版本数量将会在 1-500 之间浮动，相比于之前，版本数量更稳定。\n\n当然这个只是理论数值，实际情况还要考虑任务的具体执行时间、调度情况等等。\n\n## 手动 Compaction\n\n某些情况下，自动 Compaction 策略可能无法选取到某些 tablet，这时我们可能需要通过 Compaction 接口来主动触发指定 tablet 的 Compaction。我们以 curl 命令举例：\n\n```\ncurl -X POST http://192.168.1.1:8040/api/compaction/run?tablet_id=106818600\\&schema_hash=6979334\\&compact_type=cumulative\n```\n\n这里我们指定 id 为 106818600，schema hash 为 6979334 的 tablet 进行 Cumulative Compaction（`compact_type` 参数为 base 则触发 Base Compaction）。其中 schema hash 可以通过 `SHOW TABLET tablet_id` 命令得到的 SHOW PROC 命令获取。\n\n如果提交成功，则会返回：\n\n```json\n{\"status\": \"Success\", \"msg\": \"compaction task is successfully triggered.\"}\n```\n\n这是一个异步操作，命令只是提交compaction 任务，之后我们可以通过以下 API 来查看任务是否在运行：\n\n```\ncurl -X GET http://192.168.1.1:8040/api/compaction/run_status?tablet_id=106818600\\&schema_hash=6979334\n返回结果：\n\n{\n    \"status\" : \"Success\",\n    \"run_status\" : false,\n    \"msg\" : \"compaction task for this tablet is running\",\n    \"tablet_id\" : 106818600,\n    \"schema_hash\" : 6979334,\n    \"compact_type\" : \"cumulative\"\n}\n```\n\n当然也可以直接查看 tablet 的版本情况：\n\n```\ncurl -X GET http://192.168.1.1:8040/api/compaction/show?tablet_id=106818600\\&schema_hash=6979334\n```\n\n## 结语\n\n我们通过三篇文章系统的阐述了 Compaction 的原理和调优过程，希望能够帮助用户更好的维护 Doris 集群。Compaction 策略是 Doris 比较复杂的一个数据处理逻辑，需要考虑的状态和情况非常多，因此也在不断完善中，最终希望能够自动的适配各种负载场景，减轻用户的运维压力。","source":"_posts/doris-compaction-3.md","raw":"---\ntitle: Doris Compaction 调优指南（3）\ndate: 2021-05-16 12:30:31\ntags: doris\nkeywords: doris\ncategories:\n  - doris 最佳实践\n---\n\n本文是 Compaction 调优系列文章的第三篇。在前两篇文章中我们介绍了Compaction的一些基本概念，以及Compaction选择策略和执行过程。本篇我们将从实际使用场景的角度出发，介绍 Compaction 的调优思路和策略。通过本文读者将了解到 Compaction 相关的日志分析、参数调整和 API 的使用。\n\n<!--more-->\n\n## 什么情况下需要调整 Compaction 参数\n\nCompaction 的目的是合并多个数据版本，一是避免在读取时大量的 Merge 操作，二是避免大量的数据版本导致的随机IO。并且在这个过程中，Compaction 操作不能占用太多的系统资源。所以我们可以以结果为导向，从以下两个方面反推是否需要调整 Compaction 策略。\n\n1. 检查数据版本是否有堆积。\n\n2. 检查 IO 和内存资源是否被 Compaction 任务过多的占用。\n\n### 查看数据版本数量变化趋势\n\nDoris 提供数据版本数量的监控数据。如果你部署了 Prometheus + Grafana 的监控，则可以通过 Grafana 仪表盘的 BE Base Compaction Score 和 BE Cumu Compaction Score 图表查看到这个监控数据的趋势图：\n\n<div style=\"width:70%;margin:auto\">{% asset_img monitor1.png \"Compaction Score 监控图1\" %}</div>\n\n> 这个图表展示的是每个 BE 节点，所有 Tablet 中数据版本最多的那个 Tablet 的版本数量，可以反映出当前版本堆积情况。\n\n> 部署方式参阅：http://doris.incubator.apache.org/master/zh-CN/administrator-guide/operation/monitor-alert.html\n\n如果没有安装这个监控，Doris 版本在 0.14.7 版本以上，也可以通过以下命令在命令行查看这个监控数据的趋势图：\n\n```sql\nmysql> ADMIN SHOW BACKEND METRIC (\"nodes\" = \"30746894\", \"metrics\" = \"BE_BASE_COMPACTION_SCORE\", \"time\" = \"last 4 hours\");\nmysql> ADMIN SHOW BACKEND METRIC (\"nodes\" = \"30746894\", \"metrics\" = \"BE_CUMU_COMPACTION_SCORE\", \"time\" = \"last 4 hours\");\n```\n\n<div style=\"width:70%;margin:auto\">{% asset_img monitor2.png \"Compaction Score 监控图2\" %}</div>\n\n> 该命令具体帮助可执行 HELP ADMIN SHOW METRIC 查看，或参阅 [Doris功能介绍-内置监控]\n\n注意这里有两个指标，分别表示 Base Compaction 和 Cumulative Compaction 所对应的版本数量。在大部分情况下，我们只需要查看 Cumulative Compaction 的指标，即可大致了解集群的数据版本堆积情况。\n\n版本是否堆积没有一个明确的界限，而是根据使用场景和查询延迟进行判断的一个经验值。我们可以按照以下步骤进行简单的推断：\n\n1. 观察数据版本数量的趋势，如果趋势平稳，则说明 Compaction 和导入速度基本持平。如果呈上升态势，则说明 Compaction 速度跟不上导入速度了。如果呈下降态势，说明 Compaction 速度超过了导入速度。如果呈上升态势，或在平稳状态但数值较高，则需要考虑调整 Compaction 参数以加快 Compaction 的进度。\n\n2. 通常版本数量维持在 100 以内可以视为正常。而在大部分批量导入或低频导入场景下，版本数量通常为10-20甚至更低。\n\n### 查看Compaction资源占用\n\nCompaction 资源占用主要是 IO 和 内存。\n\n对于 Compaction 占用的内存，可以在浏览器打开以下链接：\n\n`http://be_host:webserver_port/mem_tracker`\n\n在搜索框中输入 AutoCompaction：\n\n<div style=\"width:70%;margin:auto\">{% asset_img memtracker.webp \"AutoCompaction\" %}</div>\n\n则可以查看当前Compaction的内存开销和历史峰值开销。\n\n而对于 IO 操作，目前还没有提供单独的 Compaction 操作的 IO 监控，我们只能根据集群整体的 IO 利用率情况来做判断。我们可以查看监控图 Disk IO util：\n\n<div style=\"width:70%;margin:auto\">{% asset_img monitor3.png \"Disk IO util\" %}</div>\n\n或者通过命令在命令行查看：\n\n```sql\nmysql> ADMIN SHOW BACKEND METRIC (\"nodes\" = \"30746894\", \"metrics\" = \"BE_DISK_IO\", \"time\" = \"last 4 hours\");\n```\n\n这个监控展示的是每个 BE 节点上磁盘的 IO util 指标。数值越高表示IO越繁忙。当然大部分情况下 IO 资源都是查询请求消耗的，这个监控主要用于指导我们是否需要增加或减少 Compaction 任务数。\n\n## Compaction 调优策略\n\n如果版本数量有上升趋势或者数值较高，则可以从以下两方面优化 Compaction：\n\n1. 修改 Compaction 线程数，使得同时能够执行更多的 Compaction 任务。\n\n2. 优化单个 Compaction 的执行逻辑，使数据版本数量维持在一个合理范围。\n\n### 优化前的准备工作\n\n在优化 Compaction 执行逻辑之前，我们需要使用一些命令来进一步查看一些Compaction的细节信息。\n\n首先，我们通过监控图找到一个版本数量最高的 BE 节点。然后执行以下命令分析日志：\n\n```shell\n$> grep \"succeed to do base\" log/be.INFO.log.20210505-142010 |tail -n 100\n$> grep \"succeed to do cumu\" log/be.INFO.log.20210505-142010 |tail -n 100\n```\n\n以上两个命令可以查看最近100个执行完成的 compaction 任务：\n\n```\nI0505 17:06:56.143455   675 compaction.cpp:135] succeed to do cumulative compaction. tablet=106827682.505347040.d040c1cdf71e5c95-3a002a06127ccd86, output_version=2-2631, current_max_version=2633, disk=/home/disk6/palo.HDD, segments=57. elapsed time=2.29371s. cumulative_compaction_policy=SIZE_BASED.\nI0505 17:06:56.520058   666 compaction.cpp:135] succeed to do cumulative compaction. tablet=106822189.1661856168.654562832a620ea6-46fe84c73ea84795, output_version=2-3247, current_max_version=3250, disk=/home/disk2/palo.HDD, segments=22. elapsed time=2.66858s. cumulative_compaction_policy=SIZE_BASED.\n```\n\n通过日志时间可以判断 Compaction 是否在持续正确的执行，通过 elapsed time 可以观察每个任务的执行时间。\n\n我们还可以执行以下命令展示最近100个 compaction 任务的配额（permits）：\n\n```\n$> grep \"permits\" log/be.INFO |tail -n 100\n​\nI0505 17:04:07.120920   667 compaction.cpp:83] start cumulative compaction. tablet=106827970.777011641.9c474de1b8ba9199-4addeb135d6834ac, output_version=2-2623, permits: 39\nI0505 17:04:13.898777   672 compaction.cpp:83] start cumulative compaction. tablet=106822777.1948936074.a44ac9462e79b76d-4a33ee39559bb0bf, output_version=2-3238, permits: 22\n```\n\n配额和版本数量成正比。\n\n我们可以找到 permits 较大的一个任务对应的 tablet id，如上图permit 为 39 的任务的 tablet id 为 106827970，然后继续分析这个 tablet 的 compaction 情况。\n\n通过 MySQL 客户端连接 Doris 集群后，执行：\n\n```sql\nmysql> show tablet 106827970;\n+--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+\n| DbName                   | TableName | PartitionName | IndexName | DbId    | TableId  | PartitionId | IndexId  | IsSync | DetailCmd                                                                  |\n+--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+\n| default_cluster:test     | tbl1      | p20210505     | tbl1      | 3828954 | 63708800 | 106826829   | 63709761 | true   | SHOW PROC '/dbs/3828954/63708800/partitions/106826829/63709761/106827970'; |\n+--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+\n```\n\n然后执行后面的 SHOW PROC 语句，我们可以获得这个 tablet 所有副本的详细信息。其中 VersionCount 列表示对应副本的数据版本数量。我们可以选取一个 VersionCount 较大的副本，在浏览器打开 CompactionStatus 列显示的 URL，得到如下Json结果：\n\n```json\n{\n    \"cumulative policy type\": \"SIZE_BASED\",\n    \"cumulative point\": 18438,\n    \"last cumulative failure time\": \"1970-01-01 08:00:00.000\",\n    \"last base failure time\": \"1970-01-01 08:00:00.000\",\n    \"last cumulative success time\": \"2021-05-05 17:18:48.904\",\n    \"last base success time\": \"2021-05-05 16:14:49.786\",\n    \"rowsets\": [\n        \"[0-17444] 13 DATA NONOVERLAPPING 0200000000b1fb8d344f83103113563dd81740036795499d 2.86 GB\",\n        \"[17445-17751] 1 DATA NONOVERLAPPING 0200000000b25183344f83103113563dd81740036795499d 68.61 MB\",\n        \"[17752-18089] 1 DATA NONOVERLAPPING 0200000000b2b9a2344f83103113563dd81740036795499d 74.52 MB\",\n        \"[18090-18437] 1 DATA NONOVERLAPPING 0200000000b32686344f83103113563dd81740036795499d 76.41 MB\",\n        \"[18438-18678] 1 DATA NONOVERLAPPING 0200000000b37084344f83103113563dd81740036795499d 53.07 MB\",\n        \"[18679-18679] 1 DATA NONOVERLAPPING 0200000000b36d87344f83103113563dd81740036795499d 3.11 KB\",\n        \"[18680-18680] 1 DATA NONOVERLAPPING 0200000000b36d70344f83103113563dd81740036795499d 258.40 KB\",\n        \"[18681-18681] 1 DATA NONOVERLAPPING 0200000000b36da0344f83103113563dd81740036795499d 266.98 KB\",\n    ],\n    \"stale_rowsets\": [\n    ],\n    \"stale version path\": [\n    ]\n}\n```\n\n这里我们可以看到一个 tablet 的 Cumulative Point，最近一次成功、失败的 BC/CC 任务时间，以及每个 rowset 的版本信息。如上面这个示例，我们可以得出以下结论：\n\n1. 基线数据量大约在2-3GB，增量rowset增长到几十MB后就会晋升到BC任务区。\n\n2. 新增rowset数据量很小，且版本增长较快，说明这是一个高频小批量的导入场景。\n\n我们还可以进一步的通过以下命令分析指定 tablet id 的日志：\n\n```\n# 查看 tablet 48062815 最近十个任务的配额情况\n$> grep permits log/be.INFO |grep 48062815 |tail -n 10\n\n# 查看 tablet 48062815 最近十个执行完成的 compaction 任务\n$> grep \"succeed to do\" log/be.INFO |grep 48062815 |tail -n 10\n```\n\n另外，我们还可以在浏览器打开以下 URL，查看一个 BE 节点当前正在执行的 compaction 任务：\n\n```\nbe_host:webserver_port/api/compaction/run_status\n```\n\n```json\n{\n    \"CumulativeCompaction\": {\n        \"/home/disk2/palo\": [],\n        \"/home/disk1/palo\": [\n            \"48061239\"\n        ]\n    },\n    \"BaseCompaction\": {\n        \"/home/disk2/palo\": [],\n        \"/home/disk1/palo\": [\n            \"48062815\",\n            \"48061276\"\n        ]\n    }\n}\n```\n\n这个接口可以看到每个磁盘上当前正在执行的 compaction 任务。\n\n通过以上一系列的分析，我们应该可以对系统的 Compaction 情况有以下判断：\n\n1. Compaction 任务的执行频率、每个任务大致的执行耗时。\n\n2. 指定节点数据版本数量的变化情况。\n\n2. 指定 tablet 数据版本的变化情况，以及 compaction 的频率。\n\n这些结论将指导我们对 Compaction 进行调优。\n\n### 修改 Compaction 线程数\n\n增加 Compaction 线程数是一个非常直接的加速 Compaction 的方法。但是更多的任务意味着更大的 IO 和 内存开销。尤其在机械磁盘上，因为随机读写问题，有时可能单线程串行执行的效率会高于多线程并行执行。Doris 默认配置为每块盘两个 Compaction 任务（这也是最小的合法配置），最多 10 个任务。如果磁盘数量多于 5，在内存允许的情况下，可以修改 `max_compaction_threads` 参数增加总任务数，以保证每块盘可以执行两个 Compaction 任务。\n\n对于机械磁盘，不建议增加每块盘的任务数。对于固态硬盘，可以考虑修改 `compaction_task_num_per_disk` 参数适当增加每块盘的任务数，如修改为 4。注意修改这个参数的同时可能还需同步修改 `max_compaction_threads`，使得 `max_compaction_threads` 大于等于 `compaction_task_num_per_disk * 磁盘数量`。\n\n### 优化单个 Compaction 任务逻辑\n\n这个优化方式比较复杂，我们尝试从几个场景出发来说明：\n\n**场景一：基线数据量大，Base Compaction 任务执行时间长。**\n\nBC 任务执行时间长，意味着一个任务会长时间占用 Compaction 工作线程，从而导致其他 tablet 的 compaction 任务时间被挤占。如果是因为 0 号版本的基线数据量较大导致，则我们可以考虑尽量推迟增量rowset 晋升到 BC 任务区的时间。以下两个参数将影响这个逻辑：\n\n* `cumulative_size_based_promotion_ratio`：默认 0.05，基线数据量乘以这个系数，即晋升阈值。可以调大这个系数来提高晋升阈值。\n\n* `cumulative_size_based_promotion_size_mbytes`：默认 1024MB。如果增量rowset的数据量大于这个值，则会忽略第一个参数的阈值直接晋升。因此需要同时调整这个参数来提升晋升阈值。\n\n当然，提升晋升阈值，会导致单个 BC 任务需要处理更大的数据量，耗时更长，但是总体的数据量会减少。举个例子。基线数据大小为 1024GB，假设晋升阈值分别为 100MB 和 200MB。数据导入速度为 100MB/分钟。每5个版本执行一次 BC。那么理论上在10分钟内，阈值为 100MB 时，BC 任务处理的总数据量为 (1024 + 100 * 5）* 2 = 3048MB。阈值为 200MB 是，BC 任务处理的总数据量为 (1024 + 200 * 5) = 2024 MB。\n\n**场景二：增量数据版本数量增长较快，Cumulative Compaction 处理过多版本，耗时较长。**\n\n`max_cumulative_compaction_num_singleton_deltas` 参数控制一个 CC 任务最多合并多少个数据版本，默认值为 1000。我们考虑这样一种场景：针对某一个 tablet，其数据版本的增长速度为 1个/秒。而其 CC 任务的执行时间 + 调度时间是 1000秒（即单个 CC 任务的执行时间加上Compaction再一次调度到这个 tablet 的时间总和）。那么我们可能会看到这个 tablet 的版本数量在 1-1000之间浮动（这里我们忽略基线版本数量）。因为在下一次 CC 任务执行前的 1000 秒内，又会累积 1000 个版本。\n\n这种情况可能导致这个 tablet 的读取效率很不稳定。这时我们可以尝试调小 max_cumulative_compaction_num_singleton_deltas 这个参数，这样一个 CC 所要合并的版本数更少，执行时间更短，执行频率会更高。还是刚才这个场景，假设参数调整到500，而对应的 CC 任务的执行时间 + 调度时间也降低到 500，则理论上这个 tablet 的版本数量将会在 1-500 之间浮动，相比于之前，版本数量更稳定。\n\n当然这个只是理论数值，实际情况还要考虑任务的具体执行时间、调度情况等等。\n\n## 手动 Compaction\n\n某些情况下，自动 Compaction 策略可能无法选取到某些 tablet，这时我们可能需要通过 Compaction 接口来主动触发指定 tablet 的 Compaction。我们以 curl 命令举例：\n\n```\ncurl -X POST http://192.168.1.1:8040/api/compaction/run?tablet_id=106818600\\&schema_hash=6979334\\&compact_type=cumulative\n```\n\n这里我们指定 id 为 106818600，schema hash 为 6979334 的 tablet 进行 Cumulative Compaction（`compact_type` 参数为 base 则触发 Base Compaction）。其中 schema hash 可以通过 `SHOW TABLET tablet_id` 命令得到的 SHOW PROC 命令获取。\n\n如果提交成功，则会返回：\n\n```json\n{\"status\": \"Success\", \"msg\": \"compaction task is successfully triggered.\"}\n```\n\n这是一个异步操作，命令只是提交compaction 任务，之后我们可以通过以下 API 来查看任务是否在运行：\n\n```\ncurl -X GET http://192.168.1.1:8040/api/compaction/run_status?tablet_id=106818600\\&schema_hash=6979334\n返回结果：\n\n{\n    \"status\" : \"Success\",\n    \"run_status\" : false,\n    \"msg\" : \"compaction task for this tablet is running\",\n    \"tablet_id\" : 106818600,\n    \"schema_hash\" : 6979334,\n    \"compact_type\" : \"cumulative\"\n}\n```\n\n当然也可以直接查看 tablet 的版本情况：\n\n```\ncurl -X GET http://192.168.1.1:8040/api/compaction/show?tablet_id=106818600\\&schema_hash=6979334\n```\n\n## 结语\n\n我们通过三篇文章系统的阐述了 Compaction 的原理和调优过程，希望能够帮助用户更好的维护 Doris 集群。Compaction 策略是 Doris 比较复杂的一个数据处理逻辑，需要考虑的状态和情况非常多，因此也在不断完善中，最终希望能够自动的适配各种负载场景，减轻用户的运维压力。","slug":"doris-compaction-3","published":1,"updated":"2021-05-16T04:29:54.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoqwxupm000dewjzc7j1hzjp","content":"<p>本文是 Compaction 调优系列文章的第三篇。在前两篇文章中我们介绍了Compaction的一些基本概念，以及Compaction选择策略和执行过程。本篇我们将从实际使用场景的角度出发，介绍 Compaction 的调优思路和策略。通过本文读者将了解到 Compaction 相关的日志分析、参数调整和 API 的使用。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"什么情况下需要调整-Compaction-参数\"><a href=\"#什么情况下需要调整-Compaction-参数\" class=\"headerlink\" title=\"什么情况下需要调整 Compaction 参数\"></a>什么情况下需要调整 Compaction 参数</h2><p>Compaction 的目的是合并多个数据版本，一是避免在读取时大量的 Merge 操作，二是避免大量的数据版本导致的随机IO。并且在这个过程中，Compaction 操作不能占用太多的系统资源。所以我们可以以结果为导向，从以下两个方面反推是否需要调整 Compaction 策略。</p>\n<ol>\n<li><p>检查数据版本是否有堆积。</p>\n</li>\n<li><p>检查 IO 和内存资源是否被 Compaction 任务过多的占用。</p>\n</li>\n</ol>\n<h3 id=\"查看数据版本数量变化趋势\"><a href=\"#查看数据版本数量变化趋势\" class=\"headerlink\" title=\"查看数据版本数量变化趋势\"></a>查看数据版本数量变化趋势</h3><p>Doris 提供数据版本数量的监控数据。如果你部署了 Prometheus + Grafana 的监控，则可以通过 Grafana 仪表盘的 BE Base Compaction Score 和 BE Cumu Compaction Score 图表查看到这个监控数据的趋势图：</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/16/doris-compaction-3/monitor1.png\" class=\"\" title=\"Compaction Score 监控图1\"></div>\n\n<blockquote>\n<p>这个图表展示的是每个 BE 节点，所有 Tablet 中数据版本最多的那个 Tablet 的版本数量，可以反映出当前版本堆积情况。</p>\n</blockquote>\n<blockquote>\n<p>部署方式参阅：<a href=\"http://doris.incubator.apache.org/master/zh-CN/administrator-guide/operation/monitor-alert.html\">http://doris.incubator.apache.org/master/zh-CN/administrator-guide/operation/monitor-alert.html</a></p>\n</blockquote>\n<p>如果没有安装这个监控，Doris 版本在 0.14.7 版本以上，也可以通过以下命令在命令行查看这个监控数据的趋势图：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> ADMIN <span class=\"keyword\">SHOW</span> BACKEND METRIC (&quot;nodes&quot; <span class=\"operator\">=</span> &quot;30746894&quot;, &quot;metrics&quot; <span class=\"operator\">=</span> &quot;BE_BASE_COMPACTION_SCORE&quot;, &quot;time&quot; <span class=\"operator\">=</span> &quot;last 4 hours&quot;);</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> ADMIN <span class=\"keyword\">SHOW</span> BACKEND METRIC (&quot;nodes&quot; <span class=\"operator\">=</span> &quot;30746894&quot;, &quot;metrics&quot; <span class=\"operator\">=</span> &quot;BE_CUMU_COMPACTION_SCORE&quot;, &quot;time&quot; <span class=\"operator\">=</span> &quot;last 4 hours&quot;);</span><br></pre></td></tr></table></figure>\n\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/16/doris-compaction-3/monitor2.png\" class=\"\" title=\"Compaction Score 监控图2\"></div>\n\n<blockquote>\n<p>该命令具体帮助可执行 HELP ADMIN SHOW METRIC 查看，或参阅 [Doris功能介绍-内置监控]</p>\n</blockquote>\n<p>注意这里有两个指标，分别表示 Base Compaction 和 Cumulative Compaction 所对应的版本数量。在大部分情况下，我们只需要查看 Cumulative Compaction 的指标，即可大致了解集群的数据版本堆积情况。</p>\n<p>版本是否堆积没有一个明确的界限，而是根据使用场景和查询延迟进行判断的一个经验值。我们可以按照以下步骤进行简单的推断：</p>\n<ol>\n<li><p>观察数据版本数量的趋势，如果趋势平稳，则说明 Compaction 和导入速度基本持平。如果呈上升态势，则说明 Compaction 速度跟不上导入速度了。如果呈下降态势，说明 Compaction 速度超过了导入速度。如果呈上升态势，或在平稳状态但数值较高，则需要考虑调整 Compaction 参数以加快 Compaction 的进度。</p>\n</li>\n<li><p>通常版本数量维持在 100 以内可以视为正常。而在大部分批量导入或低频导入场景下，版本数量通常为10-20甚至更低。</p>\n</li>\n</ol>\n<h3 id=\"查看Compaction资源占用\"><a href=\"#查看Compaction资源占用\" class=\"headerlink\" title=\"查看Compaction资源占用\"></a>查看Compaction资源占用</h3><p>Compaction 资源占用主要是 IO 和 内存。</p>\n<p>对于 Compaction 占用的内存，可以在浏览器打开以下链接：</p>\n<p><code>http://be_host:webserver_port/mem_tracker</code></p>\n<p>在搜索框中输入 AutoCompaction：</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/16/doris-compaction-3/memtracker.webp\" class=\"\" title=\"AutoCompaction\"></div>\n\n<p>则可以查看当前Compaction的内存开销和历史峰值开销。</p>\n<p>而对于 IO 操作，目前还没有提供单独的 Compaction 操作的 IO 监控，我们只能根据集群整体的 IO 利用率情况来做判断。我们可以查看监控图 Disk IO util：</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/16/doris-compaction-3/monitor3.png\" class=\"\" title=\"Disk IO util\"></div>\n\n<p>或者通过命令在命令行查看：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> ADMIN <span class=\"keyword\">SHOW</span> BACKEND METRIC (&quot;nodes&quot; <span class=\"operator\">=</span> &quot;30746894&quot;, &quot;metrics&quot; <span class=\"operator\">=</span> &quot;BE_DISK_IO&quot;, &quot;time&quot; <span class=\"operator\">=</span> &quot;last 4 hours&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这个监控展示的是每个 BE 节点上磁盘的 IO util 指标。数值越高表示IO越繁忙。当然大部分情况下 IO 资源都是查询请求消耗的，这个监控主要用于指导我们是否需要增加或减少 Compaction 任务数。</p>\n<h2 id=\"Compaction-调优策略\"><a href=\"#Compaction-调优策略\" class=\"headerlink\" title=\"Compaction 调优策略\"></a>Compaction 调优策略</h2><p>如果版本数量有上升趋势或者数值较高，则可以从以下两方面优化 Compaction：</p>\n<ol>\n<li><p>修改 Compaction 线程数，使得同时能够执行更多的 Compaction 任务。</p>\n</li>\n<li><p>优化单个 Compaction 的执行逻辑，使数据版本数量维持在一个合理范围。</p>\n</li>\n</ol>\n<h3 id=\"优化前的准备工作\"><a href=\"#优化前的准备工作\" class=\"headerlink\" title=\"优化前的准备工作\"></a>优化前的准备工作</h3><p>在优化 Compaction 执行逻辑之前，我们需要使用一些命令来进一步查看一些Compaction的细节信息。</p>\n<p>首先，我们通过监控图找到一个版本数量最高的 BE 节点。然后执行以下命令分析日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&gt; grep <span class=\"string\">&quot;succeed to do base&quot;</span> <span class=\"built_in\">log</span>/be.INFO.log.20210505-142010 |tail -n 100</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&gt; grep <span class=\"string\">&quot;succeed to do cumu&quot;</span> <span class=\"built_in\">log</span>/be.INFO.log.20210505-142010 |tail -n 100</span></span><br></pre></td></tr></table></figure>\n\n<p>以上两个命令可以查看最近100个执行完成的 compaction 任务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I0505 17:06:56.143455   675 compaction.cpp:135] succeed to do cumulative compaction. tablet=106827682.505347040.d040c1cdf71e5c95-3a002a06127ccd86, output_version=2-2631, current_max_version=2633, disk=/home/disk6/palo.HDD, segments=57. elapsed time=2.29371s. cumulative_compaction_policy=SIZE_BASED.</span><br><span class=\"line\">I0505 17:06:56.520058   666 compaction.cpp:135] succeed to do cumulative compaction. tablet=106822189.1661856168.654562832a620ea6-46fe84c73ea84795, output_version=2-3247, current_max_version=3250, disk=/home/disk2/palo.HDD, segments=22. elapsed time=2.66858s. cumulative_compaction_policy=SIZE_BASED.</span><br></pre></td></tr></table></figure>\n\n<p>通过日志时间可以判断 Compaction 是否在持续正确的执行，通过 elapsed time 可以观察每个任务的执行时间。</p>\n<p>我们还可以执行以下命令展示最近100个 compaction 任务的配额（permits）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; grep &quot;permits&quot; log/be.INFO |tail -n 100</span><br><span class=\"line\">​</span><br><span class=\"line\">I0505 17:04:07.120920   667 compaction.cpp:83] start cumulative compaction. tablet=106827970.777011641.9c474de1b8ba9199-4addeb135d6834ac, output_version=2-2623, permits: 39</span><br><span class=\"line\">I0505 17:04:13.898777   672 compaction.cpp:83] start cumulative compaction. tablet=106822777.1948936074.a44ac9462e79b76d-4a33ee39559bb0bf, output_version=2-3238, permits: 22</span><br></pre></td></tr></table></figure>\n\n<p>配额和版本数量成正比。</p>\n<p>我们可以找到 permits 较大的一个任务对应的 tablet id，如上图permit 为 39 的任务的 tablet id 为 106827970，然后继续分析这个 tablet 的 compaction 情况。</p>\n<p>通过 MySQL 客户端连接 Doris 集群后，执行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> tablet <span class=\"number\">106827970</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> DbName                   <span class=\"operator\">|</span> TableName <span class=\"operator\">|</span> PartitionName <span class=\"operator\">|</span> IndexName <span class=\"operator\">|</span> DbId    <span class=\"operator\">|</span> TableId  <span class=\"operator\">|</span> PartitionId <span class=\"operator\">|</span> IndexId  <span class=\"operator\">|</span> IsSync <span class=\"operator\">|</span> DetailCmd                                                                  <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> default_cluster:test     <span class=\"operator\">|</span> tbl1      <span class=\"operator\">|</span> p20210505     <span class=\"operator\">|</span> tbl1      <span class=\"operator\">|</span> <span class=\"number\">3828954</span> <span class=\"operator\">|</span> <span class=\"number\">63708800</span> <span class=\"operator\">|</span> <span class=\"number\">106826829</span>   <span class=\"operator\">|</span> <span class=\"number\">63709761</span> <span class=\"operator\">|</span> <span class=\"literal\">true</span>   <span class=\"operator\">|</span> <span class=\"keyword\">SHOW</span> PROC <span class=\"string\">&#x27;/dbs/3828954/63708800/partitions/106826829/63709761/106827970&#x27;</span>; <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>\n\n<p>然后执行后面的 SHOW PROC 语句，我们可以获得这个 tablet 所有副本的详细信息。其中 VersionCount 列表示对应副本的数据版本数量。我们可以选取一个 VersionCount 较大的副本，在浏览器打开 CompactionStatus 列显示的 URL，得到如下Json结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;cumulative policy type&quot;</span>: <span class=\"string\">&quot;SIZE_BASED&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;cumulative point&quot;</span>: <span class=\"number\">18438</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;last cumulative failure time&quot;</span>: <span class=\"string\">&quot;1970-01-01 08:00:00.000&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;last base failure time&quot;</span>: <span class=\"string\">&quot;1970-01-01 08:00:00.000&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;last cumulative success time&quot;</span>: <span class=\"string\">&quot;2021-05-05 17:18:48.904&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;last base success time&quot;</span>: <span class=\"string\">&quot;2021-05-05 16:14:49.786&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;rowsets&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;[0-17444] 13 DATA NONOVERLAPPING 0200000000b1fb8d344f83103113563dd81740036795499d 2.86 GB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[17445-17751] 1 DATA NONOVERLAPPING 0200000000b25183344f83103113563dd81740036795499d 68.61 MB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[17752-18089] 1 DATA NONOVERLAPPING 0200000000b2b9a2344f83103113563dd81740036795499d 74.52 MB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18090-18437] 1 DATA NONOVERLAPPING 0200000000b32686344f83103113563dd81740036795499d 76.41 MB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18438-18678] 1 DATA NONOVERLAPPING 0200000000b37084344f83103113563dd81740036795499d 53.07 MB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18679-18679] 1 DATA NONOVERLAPPING 0200000000b36d87344f83103113563dd81740036795499d 3.11 KB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18680-18680] 1 DATA NONOVERLAPPING 0200000000b36d70344f83103113563dd81740036795499d 258.40 KB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18681-18681] 1 DATA NONOVERLAPPING 0200000000b36da0344f83103113563dd81740036795499d 266.98 KB&quot;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;stale_rowsets&quot;</span>: [</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;stale version path&quot;</span>: [</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们可以看到一个 tablet 的 Cumulative Point，最近一次成功、失败的 BC/CC 任务时间，以及每个 rowset 的版本信息。如上面这个示例，我们可以得出以下结论：</p>\n<ol>\n<li><p>基线数据量大约在2-3GB，增量rowset增长到几十MB后就会晋升到BC任务区。</p>\n</li>\n<li><p>新增rowset数据量很小，且版本增长较快，说明这是一个高频小批量的导入场景。</p>\n</li>\n</ol>\n<p>我们还可以进一步的通过以下命令分析指定 tablet id 的日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看 tablet 48062815 最近十个任务的配额情况</span><br><span class=\"line\">$&gt; grep permits log/be.INFO |grep 48062815 |tail -n 10</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看 tablet 48062815 最近十个执行完成的 compaction 任务</span><br><span class=\"line\">$&gt; grep &quot;succeed to do&quot; log/be.INFO |grep 48062815 |tail -n 10</span><br></pre></td></tr></table></figure>\n\n<p>另外，我们还可以在浏览器打开以下 URL，查看一个 BE 节点当前正在执行的 compaction 任务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">be_host:webserver_port/api/compaction/run_status</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;CumulativeCompaction&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;/home/disk2/palo&quot;</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">&quot;/home/disk1/palo&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;48061239&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">&quot;BaseCompaction&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;/home/disk2/palo&quot;</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">&quot;/home/disk1/palo&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;48062815&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;48061276&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个接口可以看到每个磁盘上当前正在执行的 compaction 任务。</p>\n<p>通过以上一系列的分析，我们应该可以对系统的 Compaction 情况有以下判断：</p>\n<ol>\n<li><p>Compaction 任务的执行频率、每个任务大致的执行耗时。</p>\n</li>\n<li><p>指定节点数据版本数量的变化情况。</p>\n</li>\n<li><p>指定 tablet 数据版本的变化情况，以及 compaction 的频率。</p>\n</li>\n</ol>\n<p>这些结论将指导我们对 Compaction 进行调优。</p>\n<h3 id=\"修改-Compaction-线程数\"><a href=\"#修改-Compaction-线程数\" class=\"headerlink\" title=\"修改 Compaction 线程数\"></a>修改 Compaction 线程数</h3><p>增加 Compaction 线程数是一个非常直接的加速 Compaction 的方法。但是更多的任务意味着更大的 IO 和 内存开销。尤其在机械磁盘上，因为随机读写问题，有时可能单线程串行执行的效率会高于多线程并行执行。Doris 默认配置为每块盘两个 Compaction 任务（这也是最小的合法配置），最多 10 个任务。如果磁盘数量多于 5，在内存允许的情况下，可以修改 <code>max_compaction_threads</code> 参数增加总任务数，以保证每块盘可以执行两个 Compaction 任务。</p>\n<p>对于机械磁盘，不建议增加每块盘的任务数。对于固态硬盘，可以考虑修改 <code>compaction_task_num_per_disk</code> 参数适当增加每块盘的任务数，如修改为 4。注意修改这个参数的同时可能还需同步修改 <code>max_compaction_threads</code>，使得 <code>max_compaction_threads</code> 大于等于 <code>compaction_task_num_per_disk * 磁盘数量</code>。</p>\n<h3 id=\"优化单个-Compaction-任务逻辑\"><a href=\"#优化单个-Compaction-任务逻辑\" class=\"headerlink\" title=\"优化单个 Compaction 任务逻辑\"></a>优化单个 Compaction 任务逻辑</h3><p>这个优化方式比较复杂，我们尝试从几个场景出发来说明：</p>\n<p><strong>场景一：基线数据量大，Base Compaction 任务执行时间长。</strong></p>\n<p>BC 任务执行时间长，意味着一个任务会长时间占用 Compaction 工作线程，从而导致其他 tablet 的 compaction 任务时间被挤占。如果是因为 0 号版本的基线数据量较大导致，则我们可以考虑尽量推迟增量rowset 晋升到 BC 任务区的时间。以下两个参数将影响这个逻辑：</p>\n<ul>\n<li><p><code>cumulative_size_based_promotion_ratio</code>：默认 0.05，基线数据量乘以这个系数，即晋升阈值。可以调大这个系数来提高晋升阈值。</p>\n</li>\n<li><p><code>cumulative_size_based_promotion_size_mbytes</code>：默认 1024MB。如果增量rowset的数据量大于这个值，则会忽略第一个参数的阈值直接晋升。因此需要同时调整这个参数来提升晋升阈值。</p>\n</li>\n</ul>\n<p>当然，提升晋升阈值，会导致单个 BC 任务需要处理更大的数据量，耗时更长，但是总体的数据量会减少。举个例子。基线数据大小为 1024GB，假设晋升阈值分别为 100MB 和 200MB。数据导入速度为 100MB/分钟。每5个版本执行一次 BC。那么理论上在10分钟内，阈值为 100MB 时，BC 任务处理的总数据量为 (1024 + 100 * 5）* 2 = 3048MB。阈值为 200MB 是，BC 任务处理的总数据量为 (1024 + 200 * 5) = 2024 MB。</p>\n<p><strong>场景二：增量数据版本数量增长较快，Cumulative Compaction 处理过多版本，耗时较长。</strong></p>\n<p><code>max_cumulative_compaction_num_singleton_deltas</code> 参数控制一个 CC 任务最多合并多少个数据版本，默认值为 1000。我们考虑这样一种场景：针对某一个 tablet，其数据版本的增长速度为 1个/秒。而其 CC 任务的执行时间 + 调度时间是 1000秒（即单个 CC 任务的执行时间加上Compaction再一次调度到这个 tablet 的时间总和）。那么我们可能会看到这个 tablet 的版本数量在 1-1000之间浮动（这里我们忽略基线版本数量）。因为在下一次 CC 任务执行前的 1000 秒内，又会累积 1000 个版本。</p>\n<p>这种情况可能导致这个 tablet 的读取效率很不稳定。这时我们可以尝试调小 max_cumulative_compaction_num_singleton_deltas 这个参数，这样一个 CC 所要合并的版本数更少，执行时间更短，执行频率会更高。还是刚才这个场景，假设参数调整到500，而对应的 CC 任务的执行时间 + 调度时间也降低到 500，则理论上这个 tablet 的版本数量将会在 1-500 之间浮动，相比于之前，版本数量更稳定。</p>\n<p>当然这个只是理论数值，实际情况还要考虑任务的具体执行时间、调度情况等等。</p>\n<h2 id=\"手动-Compaction\"><a href=\"#手动-Compaction\" class=\"headerlink\" title=\"手动 Compaction\"></a>手动 Compaction</h2><p>某些情况下，自动 Compaction 策略可能无法选取到某些 tablet，这时我们可能需要通过 Compaction 接口来主动触发指定 tablet 的 Compaction。我们以 curl 命令举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://192.168.1.1:8040/api/compaction/run?tablet_id=106818600\\&amp;schema_hash=6979334\\&amp;compact_type=cumulative</span><br></pre></td></tr></table></figure>\n\n<p>这里我们指定 id 为 106818600，schema hash 为 6979334 的 tablet 进行 Cumulative Compaction（<code>compact_type</code> 参数为 base 则触发 Base Compaction）。其中 schema hash 可以通过 <code>SHOW TABLET tablet_id</code> 命令得到的 SHOW PROC 命令获取。</p>\n<p>如果提交成功，则会返回：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;status&quot;</span>: <span class=\"string\">&quot;Success&quot;</span>, <span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;compaction task is successfully triggered.&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个异步操作，命令只是提交compaction 任务，之后我们可以通过以下 API 来查看任务是否在运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET http://192.168.1.1:8040/api/compaction/run_status?tablet_id=106818600\\&amp;schema_hash=6979334</span><br><span class=\"line\">返回结果：</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;status&quot; : &quot;Success&quot;,</span><br><span class=\"line\">    &quot;run_status&quot; : false,</span><br><span class=\"line\">    &quot;msg&quot; : &quot;compaction task for this tablet is running&quot;,</span><br><span class=\"line\">    &quot;tablet_id&quot; : 106818600,</span><br><span class=\"line\">    &quot;schema_hash&quot; : 6979334,</span><br><span class=\"line\">    &quot;compact_type&quot; : &quot;cumulative&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以直接查看 tablet 的版本情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET http://192.168.1.1:8040/api/compaction/show?tablet_id=106818600\\&amp;schema_hash=6979334</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>我们通过三篇文章系统的阐述了 Compaction 的原理和调优过程，希望能够帮助用户更好的维护 Doris 集群。Compaction 策略是 Doris 比较复杂的一个数据处理逻辑，需要考虑的状态和情况非常多，因此也在不断完善中，最终希望能够自动的适配各种负载场景，减轻用户的运维压力。</p>\n","site":{"data":{}},"excerpt":"<p>本文是 Compaction 调优系列文章的第三篇。在前两篇文章中我们介绍了Compaction的一些基本概念，以及Compaction选择策略和执行过程。本篇我们将从实际使用场景的角度出发，介绍 Compaction 的调优思路和策略。通过本文读者将了解到 Compaction 相关的日志分析、参数调整和 API 的使用。</p>","more":"<h2 id=\"什么情况下需要调整-Compaction-参数\"><a href=\"#什么情况下需要调整-Compaction-参数\" class=\"headerlink\" title=\"什么情况下需要调整 Compaction 参数\"></a>什么情况下需要调整 Compaction 参数</h2><p>Compaction 的目的是合并多个数据版本，一是避免在读取时大量的 Merge 操作，二是避免大量的数据版本导致的随机IO。并且在这个过程中，Compaction 操作不能占用太多的系统资源。所以我们可以以结果为导向，从以下两个方面反推是否需要调整 Compaction 策略。</p>\n<ol>\n<li><p>检查数据版本是否有堆积。</p>\n</li>\n<li><p>检查 IO 和内存资源是否被 Compaction 任务过多的占用。</p>\n</li>\n</ol>\n<h3 id=\"查看数据版本数量变化趋势\"><a href=\"#查看数据版本数量变化趋势\" class=\"headerlink\" title=\"查看数据版本数量变化趋势\"></a>查看数据版本数量变化趋势</h3><p>Doris 提供数据版本数量的监控数据。如果你部署了 Prometheus + Grafana 的监控，则可以通过 Grafana 仪表盘的 BE Base Compaction Score 和 BE Cumu Compaction Score 图表查看到这个监控数据的趋势图：</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/16/doris-compaction-3/monitor1.png\" class=\"\" title=\"Compaction Score 监控图1\"></div>\n\n<blockquote>\n<p>这个图表展示的是每个 BE 节点，所有 Tablet 中数据版本最多的那个 Tablet 的版本数量，可以反映出当前版本堆积情况。</p>\n</blockquote>\n<blockquote>\n<p>部署方式参阅：<a href=\"http://doris.incubator.apache.org/master/zh-CN/administrator-guide/operation/monitor-alert.html\">http://doris.incubator.apache.org/master/zh-CN/administrator-guide/operation/monitor-alert.html</a></p>\n</blockquote>\n<p>如果没有安装这个监控，Doris 版本在 0.14.7 版本以上，也可以通过以下命令在命令行查看这个监控数据的趋势图：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> ADMIN <span class=\"keyword\">SHOW</span> BACKEND METRIC (&quot;nodes&quot; <span class=\"operator\">=</span> &quot;30746894&quot;, &quot;metrics&quot; <span class=\"operator\">=</span> &quot;BE_BASE_COMPACTION_SCORE&quot;, &quot;time&quot; <span class=\"operator\">=</span> &quot;last 4 hours&quot;);</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> ADMIN <span class=\"keyword\">SHOW</span> BACKEND METRIC (&quot;nodes&quot; <span class=\"operator\">=</span> &quot;30746894&quot;, &quot;metrics&quot; <span class=\"operator\">=</span> &quot;BE_CUMU_COMPACTION_SCORE&quot;, &quot;time&quot; <span class=\"operator\">=</span> &quot;last 4 hours&quot;);</span><br></pre></td></tr></table></figure>\n\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/16/doris-compaction-3/monitor2.png\" class=\"\" title=\"Compaction Score 监控图2\"></div>\n\n<blockquote>\n<p>该命令具体帮助可执行 HELP ADMIN SHOW METRIC 查看，或参阅 [Doris功能介绍-内置监控]</p>\n</blockquote>\n<p>注意这里有两个指标，分别表示 Base Compaction 和 Cumulative Compaction 所对应的版本数量。在大部分情况下，我们只需要查看 Cumulative Compaction 的指标，即可大致了解集群的数据版本堆积情况。</p>\n<p>版本是否堆积没有一个明确的界限，而是根据使用场景和查询延迟进行判断的一个经验值。我们可以按照以下步骤进行简单的推断：</p>\n<ol>\n<li><p>观察数据版本数量的趋势，如果趋势平稳，则说明 Compaction 和导入速度基本持平。如果呈上升态势，则说明 Compaction 速度跟不上导入速度了。如果呈下降态势，说明 Compaction 速度超过了导入速度。如果呈上升态势，或在平稳状态但数值较高，则需要考虑调整 Compaction 参数以加快 Compaction 的进度。</p>\n</li>\n<li><p>通常版本数量维持在 100 以内可以视为正常。而在大部分批量导入或低频导入场景下，版本数量通常为10-20甚至更低。</p>\n</li>\n</ol>\n<h3 id=\"查看Compaction资源占用\"><a href=\"#查看Compaction资源占用\" class=\"headerlink\" title=\"查看Compaction资源占用\"></a>查看Compaction资源占用</h3><p>Compaction 资源占用主要是 IO 和 内存。</p>\n<p>对于 Compaction 占用的内存，可以在浏览器打开以下链接：</p>\n<p><code>http://be_host:webserver_port/mem_tracker</code></p>\n<p>在搜索框中输入 AutoCompaction：</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/16/doris-compaction-3/memtracker.webp\" class=\"\" title=\"AutoCompaction\"></div>\n\n<p>则可以查看当前Compaction的内存开销和历史峰值开销。</p>\n<p>而对于 IO 操作，目前还没有提供单独的 Compaction 操作的 IO 监控，我们只能根据集群整体的 IO 利用率情况来做判断。我们可以查看监控图 Disk IO util：</p>\n<div style=\"width:70%;margin:auto\"><img src=\"/2021/05/16/doris-compaction-3/monitor3.png\" class=\"\" title=\"Disk IO util\"></div>\n\n<p>或者通过命令在命令行查看：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> ADMIN <span class=\"keyword\">SHOW</span> BACKEND METRIC (&quot;nodes&quot; <span class=\"operator\">=</span> &quot;30746894&quot;, &quot;metrics&quot; <span class=\"operator\">=</span> &quot;BE_DISK_IO&quot;, &quot;time&quot; <span class=\"operator\">=</span> &quot;last 4 hours&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这个监控展示的是每个 BE 节点上磁盘的 IO util 指标。数值越高表示IO越繁忙。当然大部分情况下 IO 资源都是查询请求消耗的，这个监控主要用于指导我们是否需要增加或减少 Compaction 任务数。</p>\n<h2 id=\"Compaction-调优策略\"><a href=\"#Compaction-调优策略\" class=\"headerlink\" title=\"Compaction 调优策略\"></a>Compaction 调优策略</h2><p>如果版本数量有上升趋势或者数值较高，则可以从以下两方面优化 Compaction：</p>\n<ol>\n<li><p>修改 Compaction 线程数，使得同时能够执行更多的 Compaction 任务。</p>\n</li>\n<li><p>优化单个 Compaction 的执行逻辑，使数据版本数量维持在一个合理范围。</p>\n</li>\n</ol>\n<h3 id=\"优化前的准备工作\"><a href=\"#优化前的准备工作\" class=\"headerlink\" title=\"优化前的准备工作\"></a>优化前的准备工作</h3><p>在优化 Compaction 执行逻辑之前，我们需要使用一些命令来进一步查看一些Compaction的细节信息。</p>\n<p>首先，我们通过监控图找到一个版本数量最高的 BE 节点。然后执行以下命令分析日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&gt; grep <span class=\"string\">&quot;succeed to do base&quot;</span> <span class=\"built_in\">log</span>/be.INFO.log.20210505-142010 |tail -n 100</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&gt; grep <span class=\"string\">&quot;succeed to do cumu&quot;</span> <span class=\"built_in\">log</span>/be.INFO.log.20210505-142010 |tail -n 100</span></span><br></pre></td></tr></table></figure>\n\n<p>以上两个命令可以查看最近100个执行完成的 compaction 任务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I0505 17:06:56.143455   675 compaction.cpp:135] succeed to do cumulative compaction. tablet=106827682.505347040.d040c1cdf71e5c95-3a002a06127ccd86, output_version=2-2631, current_max_version=2633, disk=/home/disk6/palo.HDD, segments=57. elapsed time=2.29371s. cumulative_compaction_policy=SIZE_BASED.</span><br><span class=\"line\">I0505 17:06:56.520058   666 compaction.cpp:135] succeed to do cumulative compaction. tablet=106822189.1661856168.654562832a620ea6-46fe84c73ea84795, output_version=2-3247, current_max_version=3250, disk=/home/disk2/palo.HDD, segments=22. elapsed time=2.66858s. cumulative_compaction_policy=SIZE_BASED.</span><br></pre></td></tr></table></figure>\n\n<p>通过日志时间可以判断 Compaction 是否在持续正确的执行，通过 elapsed time 可以观察每个任务的执行时间。</p>\n<p>我们还可以执行以下命令展示最近100个 compaction 任务的配额（permits）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; grep &quot;permits&quot; log/be.INFO |tail -n 100</span><br><span class=\"line\">​</span><br><span class=\"line\">I0505 17:04:07.120920   667 compaction.cpp:83] start cumulative compaction. tablet=106827970.777011641.9c474de1b8ba9199-4addeb135d6834ac, output_version=2-2623, permits: 39</span><br><span class=\"line\">I0505 17:04:13.898777   672 compaction.cpp:83] start cumulative compaction. tablet=106822777.1948936074.a44ac9462e79b76d-4a33ee39559bb0bf, output_version=2-3238, permits: 22</span><br></pre></td></tr></table></figure>\n\n<p>配额和版本数量成正比。</p>\n<p>我们可以找到 permits 较大的一个任务对应的 tablet id，如上图permit 为 39 的任务的 tablet id 为 106827970，然后继续分析这个 tablet 的 compaction 情况。</p>\n<p>通过 MySQL 客户端连接 Doris 集群后，执行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> tablet <span class=\"number\">106827970</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> DbName                   <span class=\"operator\">|</span> TableName <span class=\"operator\">|</span> PartitionName <span class=\"operator\">|</span> IndexName <span class=\"operator\">|</span> DbId    <span class=\"operator\">|</span> TableId  <span class=\"operator\">|</span> PartitionId <span class=\"operator\">|</span> IndexId  <span class=\"operator\">|</span> IsSync <span class=\"operator\">|</span> DetailCmd                                                                  <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> default_cluster:test     <span class=\"operator\">|</span> tbl1      <span class=\"operator\">|</span> p20210505     <span class=\"operator\">|</span> tbl1      <span class=\"operator\">|</span> <span class=\"number\">3828954</span> <span class=\"operator\">|</span> <span class=\"number\">63708800</span> <span class=\"operator\">|</span> <span class=\"number\">106826829</span>   <span class=\"operator\">|</span> <span class=\"number\">63709761</span> <span class=\"operator\">|</span> <span class=\"literal\">true</span>   <span class=\"operator\">|</span> <span class=\"keyword\">SHOW</span> PROC <span class=\"string\">&#x27;/dbs/3828954/63708800/partitions/106826829/63709761/106827970&#x27;</span>; <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--------------------------+-----------+---------------+-----------+---------+----------+-------------+----------+--------+----------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>\n\n<p>然后执行后面的 SHOW PROC 语句，我们可以获得这个 tablet 所有副本的详细信息。其中 VersionCount 列表示对应副本的数据版本数量。我们可以选取一个 VersionCount 较大的副本，在浏览器打开 CompactionStatus 列显示的 URL，得到如下Json结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;cumulative policy type&quot;</span>: <span class=\"string\">&quot;SIZE_BASED&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;cumulative point&quot;</span>: <span class=\"number\">18438</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;last cumulative failure time&quot;</span>: <span class=\"string\">&quot;1970-01-01 08:00:00.000&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;last base failure time&quot;</span>: <span class=\"string\">&quot;1970-01-01 08:00:00.000&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;last cumulative success time&quot;</span>: <span class=\"string\">&quot;2021-05-05 17:18:48.904&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;last base success time&quot;</span>: <span class=\"string\">&quot;2021-05-05 16:14:49.786&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;rowsets&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;[0-17444] 13 DATA NONOVERLAPPING 0200000000b1fb8d344f83103113563dd81740036795499d 2.86 GB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[17445-17751] 1 DATA NONOVERLAPPING 0200000000b25183344f83103113563dd81740036795499d 68.61 MB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[17752-18089] 1 DATA NONOVERLAPPING 0200000000b2b9a2344f83103113563dd81740036795499d 74.52 MB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18090-18437] 1 DATA NONOVERLAPPING 0200000000b32686344f83103113563dd81740036795499d 76.41 MB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18438-18678] 1 DATA NONOVERLAPPING 0200000000b37084344f83103113563dd81740036795499d 53.07 MB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18679-18679] 1 DATA NONOVERLAPPING 0200000000b36d87344f83103113563dd81740036795499d 3.11 KB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18680-18680] 1 DATA NONOVERLAPPING 0200000000b36d70344f83103113563dd81740036795499d 258.40 KB&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;[18681-18681] 1 DATA NONOVERLAPPING 0200000000b36da0344f83103113563dd81740036795499d 266.98 KB&quot;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;stale_rowsets&quot;</span>: [</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">&quot;stale version path&quot;</span>: [</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们可以看到一个 tablet 的 Cumulative Point，最近一次成功、失败的 BC/CC 任务时间，以及每个 rowset 的版本信息。如上面这个示例，我们可以得出以下结论：</p>\n<ol>\n<li><p>基线数据量大约在2-3GB，增量rowset增长到几十MB后就会晋升到BC任务区。</p>\n</li>\n<li><p>新增rowset数据量很小，且版本增长较快，说明这是一个高频小批量的导入场景。</p>\n</li>\n</ol>\n<p>我们还可以进一步的通过以下命令分析指定 tablet id 的日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看 tablet 48062815 最近十个任务的配额情况</span><br><span class=\"line\">$&gt; grep permits log/be.INFO |grep 48062815 |tail -n 10</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看 tablet 48062815 最近十个执行完成的 compaction 任务</span><br><span class=\"line\">$&gt; grep &quot;succeed to do&quot; log/be.INFO |grep 48062815 |tail -n 10</span><br></pre></td></tr></table></figure>\n\n<p>另外，我们还可以在浏览器打开以下 URL，查看一个 BE 节点当前正在执行的 compaction 任务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">be_host:webserver_port/api/compaction/run_status</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;CumulativeCompaction&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;/home/disk2/palo&quot;</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">&quot;/home/disk1/palo&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;48061239&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">&quot;BaseCompaction&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;/home/disk2/palo&quot;</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">&quot;/home/disk1/palo&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;48062815&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;48061276&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个接口可以看到每个磁盘上当前正在执行的 compaction 任务。</p>\n<p>通过以上一系列的分析，我们应该可以对系统的 Compaction 情况有以下判断：</p>\n<ol>\n<li><p>Compaction 任务的执行频率、每个任务大致的执行耗时。</p>\n</li>\n<li><p>指定节点数据版本数量的变化情况。</p>\n</li>\n<li><p>指定 tablet 数据版本的变化情况，以及 compaction 的频率。</p>\n</li>\n</ol>\n<p>这些结论将指导我们对 Compaction 进行调优。</p>\n<h3 id=\"修改-Compaction-线程数\"><a href=\"#修改-Compaction-线程数\" class=\"headerlink\" title=\"修改 Compaction 线程数\"></a>修改 Compaction 线程数</h3><p>增加 Compaction 线程数是一个非常直接的加速 Compaction 的方法。但是更多的任务意味着更大的 IO 和 内存开销。尤其在机械磁盘上，因为随机读写问题，有时可能单线程串行执行的效率会高于多线程并行执行。Doris 默认配置为每块盘两个 Compaction 任务（这也是最小的合法配置），最多 10 个任务。如果磁盘数量多于 5，在内存允许的情况下，可以修改 <code>max_compaction_threads</code> 参数增加总任务数，以保证每块盘可以执行两个 Compaction 任务。</p>\n<p>对于机械磁盘，不建议增加每块盘的任务数。对于固态硬盘，可以考虑修改 <code>compaction_task_num_per_disk</code> 参数适当增加每块盘的任务数，如修改为 4。注意修改这个参数的同时可能还需同步修改 <code>max_compaction_threads</code>，使得 <code>max_compaction_threads</code> 大于等于 <code>compaction_task_num_per_disk * 磁盘数量</code>。</p>\n<h3 id=\"优化单个-Compaction-任务逻辑\"><a href=\"#优化单个-Compaction-任务逻辑\" class=\"headerlink\" title=\"优化单个 Compaction 任务逻辑\"></a>优化单个 Compaction 任务逻辑</h3><p>这个优化方式比较复杂，我们尝试从几个场景出发来说明：</p>\n<p><strong>场景一：基线数据量大，Base Compaction 任务执行时间长。</strong></p>\n<p>BC 任务执行时间长，意味着一个任务会长时间占用 Compaction 工作线程，从而导致其他 tablet 的 compaction 任务时间被挤占。如果是因为 0 号版本的基线数据量较大导致，则我们可以考虑尽量推迟增量rowset 晋升到 BC 任务区的时间。以下两个参数将影响这个逻辑：</p>\n<ul>\n<li><p><code>cumulative_size_based_promotion_ratio</code>：默认 0.05，基线数据量乘以这个系数，即晋升阈值。可以调大这个系数来提高晋升阈值。</p>\n</li>\n<li><p><code>cumulative_size_based_promotion_size_mbytes</code>：默认 1024MB。如果增量rowset的数据量大于这个值，则会忽略第一个参数的阈值直接晋升。因此需要同时调整这个参数来提升晋升阈值。</p>\n</li>\n</ul>\n<p>当然，提升晋升阈值，会导致单个 BC 任务需要处理更大的数据量，耗时更长，但是总体的数据量会减少。举个例子。基线数据大小为 1024GB，假设晋升阈值分别为 100MB 和 200MB。数据导入速度为 100MB/分钟。每5个版本执行一次 BC。那么理论上在10分钟内，阈值为 100MB 时，BC 任务处理的总数据量为 (1024 + 100 * 5）* 2 = 3048MB。阈值为 200MB 是，BC 任务处理的总数据量为 (1024 + 200 * 5) = 2024 MB。</p>\n<p><strong>场景二：增量数据版本数量增长较快，Cumulative Compaction 处理过多版本，耗时较长。</strong></p>\n<p><code>max_cumulative_compaction_num_singleton_deltas</code> 参数控制一个 CC 任务最多合并多少个数据版本，默认值为 1000。我们考虑这样一种场景：针对某一个 tablet，其数据版本的增长速度为 1个/秒。而其 CC 任务的执行时间 + 调度时间是 1000秒（即单个 CC 任务的执行时间加上Compaction再一次调度到这个 tablet 的时间总和）。那么我们可能会看到这个 tablet 的版本数量在 1-1000之间浮动（这里我们忽略基线版本数量）。因为在下一次 CC 任务执行前的 1000 秒内，又会累积 1000 个版本。</p>\n<p>这种情况可能导致这个 tablet 的读取效率很不稳定。这时我们可以尝试调小 max_cumulative_compaction_num_singleton_deltas 这个参数，这样一个 CC 所要合并的版本数更少，执行时间更短，执行频率会更高。还是刚才这个场景，假设参数调整到500，而对应的 CC 任务的执行时间 + 调度时间也降低到 500，则理论上这个 tablet 的版本数量将会在 1-500 之间浮动，相比于之前，版本数量更稳定。</p>\n<p>当然这个只是理论数值，实际情况还要考虑任务的具体执行时间、调度情况等等。</p>\n<h2 id=\"手动-Compaction\"><a href=\"#手动-Compaction\" class=\"headerlink\" title=\"手动 Compaction\"></a>手动 Compaction</h2><p>某些情况下，自动 Compaction 策略可能无法选取到某些 tablet，这时我们可能需要通过 Compaction 接口来主动触发指定 tablet 的 Compaction。我们以 curl 命令举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://192.168.1.1:8040/api/compaction/run?tablet_id=106818600\\&amp;schema_hash=6979334\\&amp;compact_type=cumulative</span><br></pre></td></tr></table></figure>\n\n<p>这里我们指定 id 为 106818600，schema hash 为 6979334 的 tablet 进行 Cumulative Compaction（<code>compact_type</code> 参数为 base 则触发 Base Compaction）。其中 schema hash 可以通过 <code>SHOW TABLET tablet_id</code> 命令得到的 SHOW PROC 命令获取。</p>\n<p>如果提交成功，则会返回：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">&quot;status&quot;</span>: <span class=\"string\">&quot;Success&quot;</span>, <span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;compaction task is successfully triggered.&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个异步操作，命令只是提交compaction 任务，之后我们可以通过以下 API 来查看任务是否在运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET http://192.168.1.1:8040/api/compaction/run_status?tablet_id=106818600\\&amp;schema_hash=6979334</span><br><span class=\"line\">返回结果：</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;status&quot; : &quot;Success&quot;,</span><br><span class=\"line\">    &quot;run_status&quot; : false,</span><br><span class=\"line\">    &quot;msg&quot; : &quot;compaction task for this tablet is running&quot;,</span><br><span class=\"line\">    &quot;tablet_id&quot; : 106818600,</span><br><span class=\"line\">    &quot;schema_hash&quot; : 6979334,</span><br><span class=\"line\">    &quot;compact_type&quot; : &quot;cumulative&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以直接查看 tablet 的版本情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET http://192.168.1.1:8040/api/compaction/show?tablet_id=106818600\\&amp;schema_hash=6979334</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>我们通过三篇文章系统的阐述了 Compaction 的原理和调优过程，希望能够帮助用户更好的维护 Doris 集群。Compaction 策略是 Doris 比较复杂的一个数据处理逻辑，需要考虑的状态和情况非常多，因此也在不断完善中，最终希望能够自动的适配各种负载场景，减轻用户的运维压力。</p>"}],"PostAsset":[{"_id":"source/_posts/doris-compaction-1/2048.png","slug":"2048.png","post":"ckoqwxup70001ewjz6rswaoth","modified":0,"renderable":0},{"_id":"source/_posts/doris-compaction-1/cumulative_point.png","slug":"cumulative_point.png","post":"ckoqwxup70001ewjz6rswaoth","modified":0,"renderable":0},{"_id":"source/_posts/doris-compaction-1/cumulative_point.webp","slug":"cumulative_point.webp","post":"ckoqwxup70001ewjz6rswaoth","modified":0,"renderable":0},{"_id":"source/_posts/doris-compaction-3/memtracker.webp","slug":"memtracker.webp","post":"ckoqwxupm000dewjzc7j1hzjp","modified":0,"renderable":0},{"_id":"source/_posts/doris-compaction-3/monitor1.png","slug":"monitor1.png","post":"ckoqwxupm000dewjzc7j1hzjp","modified":0,"renderable":0},{"_id":"source/_posts/doris-compaction-3/monitor2.png","slug":"monitor2.png","post":"ckoqwxupm000dewjzc7j1hzjp","modified":0,"renderable":0},{"_id":"source/_posts/doris-compaction-3/monitor3.png","slug":"monitor3.png","post":"ckoqwxupm000dewjzc7j1hzjp","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckoqwxup70001ewjz6rswaoth","category_id":"ckoqwxupc0004ewjz6w1p5v3t","_id":"ckoqwxupg000aewjz9r5v2sl6"},{"post_id":"ckoqwxupa0003ewjz1aajgte4","category_id":"ckoqwxupc0004ewjz6w1p5v3t","_id":"ckoqwxuph000cewjz8knbfu5p"},{"post_id":"ckoqwxupm000dewjzc7j1hzjp","category_id":"ckoqwxupc0004ewjz6w1p5v3t","_id":"ckoqwxupn000fewjzaxy4cpzm"}],"PostTag":[{"post_id":"ckoqwxup70001ewjz6rswaoth","tag_id":"ckoqwxupd0005ewjzaprx8ie8","_id":"ckoqwxupg0009ewjzgmy029tq"},{"post_id":"ckoqwxupa0003ewjz1aajgte4","tag_id":"ckoqwxupd0005ewjzaprx8ie8","_id":"ckoqwxuph000bewjzfhbb017b"},{"post_id":"ckoqwxupm000dewjzc7j1hzjp","tag_id":"ckoqwxupd0005ewjzaprx8ie8","_id":"ckoqwxupn000eewjz51zy9ig1"}],"Tag":[{"name":"doris","_id":"ckoqwxupd0005ewjzaprx8ie8"}]}}